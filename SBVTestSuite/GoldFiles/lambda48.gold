** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |list_length @SBV [Integer] -> SBV Integer| :: [SInteger] -> SInteger [Recursive]
[GOOD] (define-fun-rec |list_length @SBV [Integer] -> SBV Integer| ((l1_s0 (Seq Int))) Int
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (- l1_s1 l1_s4)))
                                 (let ((l1_s6 (seq.extract l1_s0 l1_s4 l1_s5)))
                                 (let ((l1_s7 (|list_length @SBV [Integer] -> SBV Integer| l1_s6)))
                                 (let ((l1_s8 (+ l1_s4 l1_s7)))
                                 (let ((l1_s9 (ite l1_s3 l1_s2 l1_s8)))
                                 l1_s9))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () Int (|list_length @SBV [Integer] -> SBV Integer| s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] (define-fun s6 () Bool (and s3 s5))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s6)
[GOOD] (declare-fun s7 () (Seq Int))
[GOOD] (declare-fun s8 () Int)
[GOOD] (define-fun s9 () Bool (= s2 s7))
[GOOD] (define-fun s10 () Int (|list_length @SBV [Integer] -> SBV Integer| s7))
[GOOD] (define-fun s11 () Bool (= s8 s10))
[GOOD] (define-fun s12 () Bool (and s9 s11))
[GOOD] (assert s12)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3))))
[SEND] (get-value (s1))
[RECV] ((s1 3))
[SEND] (get-value (s7))
[RECV] ((s7 (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3))))
[SEND] (get-value (s8))
[RECV] ((s8 3))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [1,2,3] :: [Integer]
  s1 =       3 :: Integer
  s7 = [1,2,3] :: [Integer]
  s8 =       3 :: Integer
