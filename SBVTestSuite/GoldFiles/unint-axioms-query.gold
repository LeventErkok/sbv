** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has user-defined data-types, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] (declare-sort B 0) ; N.B. Uninterpreted sort.
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () B) ; tracks user variable "p"
[GOOD] (declare-fun s1 () B) ; tracks user variable "q"
[GOOD] (declare-fun s2 () B) ; tracks user variable "r"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (declare-fun AND (B B) B)
[GOOD] (declare-fun NOT (B) B)
[GOOD] (declare-fun OR (B B) B)
[GOOD] (define-fun s3 () B (AND s1 s2))
[GOOD] (define-fun s4 () B (OR s0 s3))
[GOOD] (define-fun s5 () B (NOT s4))
[GOOD] (define-fun s6 () B (NOT s0))
[GOOD] (define-fun s7 () B (NOT s1))
[GOOD] (define-fun s8 () B (AND s6 s7))
[GOOD] (define-fun s9 () B (NOT s2))
[GOOD] (define-fun s10 () B (AND s6 s9))
[GOOD] (define-fun s11 () B (OR s8 s10))
[GOOD] (define-fun s12 () Bool (distinct s5 s11))
[GOOD] (assert s12)
[GOOD] (define-fun s13 () Bool (forall ((l1_s0 B) (l1_s1 B) (l1_s2 B))
                                 (let ((l1_s3 (OR l1_s0 l1_s1)))
                                 (let ((l1_s4 (OR l1_s0 l1_s2)))
                                 (let ((l1_s5 (AND l1_s3 l1_s4)))
                                 (let ((l1_s6 (AND l1_s1 l1_s2)))
                                 (let ((l1_s7 (OR l1_s0 l1_s6)))
                                 (let ((l1_s8 (= l1_s5 l1_s7)))
                                 l1_s8))))))))
[GOOD] (assert s13)
[GOOD] (define-fun s14 () Bool (forall ((l1_s0 B) (l1_s1 B))
                                 (let ((l1_s2 (OR l1_s0 l1_s1)))
                                 (let ((l1_s3 (NOT l1_s2)))
                                 (let ((l1_s4 (NOT l1_s0)))
                                 (let ((l1_s5 (NOT l1_s1)))
                                 (let ((l1_s6 (AND l1_s4 l1_s5)))
                                 (let ((l1_s7 (= l1_s3 l1_s6)))
                                 l1_s7))))))))
[GOOD] (assert s14)
[GOOD] (define-fun s15 () Bool (forall ((l1_s0 B))
                                 (let ((l1_s1 (NOT l1_s0)))
                                 (let ((l1_s2 (NOT l1_s1)))
                                 (let ((l1_s3 (= l1_s0 l1_s2)))
                                 l1_s3)))))
[GOOD] (assert s15)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:Unsat
DONE!
