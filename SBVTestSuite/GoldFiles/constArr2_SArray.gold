** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 1)
[GOOD] (define-fun s5 () Int 2)
[GOOD] (define-fun s7 () Int 3)
[GOOD] (define-fun s9 () Int 75)
[GOOD] (define-fun s14 () (Array Int Int) (store (store (store (store ((as const (Array Int Int)) 2) 75 5) 3 6) 2 5) 1 12))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "i"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "j"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s2 () Bool (< s0 s1))
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () Bool (= s0 s5))
[GOOD] (define-fun s8 () Bool (= s0 s7))
[GOOD] (define-fun s10 () Bool (= s0 s9))
[GOOD] (define-fun s11 () Bool (or s8 s10))
[GOOD] (define-fun s12 () Bool (or s6 s11))
[GOOD] (define-fun s13 () Bool (or s4 s12))
[GOOD] (define-fun s15 () Int (select s14 s0))
[GOOD] (define-fun s16 () Int (select s14 s1))
[GOOD] (define-fun s17 () Bool (= s15 s16))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s2)
[GOOD] (assert s13)
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 2))
[SEND] (get-value (s1))
[RECV] ((s1 75))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
Satisfiable. Model:
  i =  2 :: Integer
  j = 75 :: Integer
