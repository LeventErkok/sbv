** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has rational values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatype SBVRational ((SBV.Rational (sbv.rat.numerator Int) (sbv.rat.denominator Int))))

[GOOD] (define-fun sbv.rat.eq ((x SBVRational) (y SBVRational)) Bool
          (= (* (sbv.rat.numerator   x) (sbv.rat.denominator y))
             (* (sbv.rat.denominator x) (sbv.rat.numerator   y)))
       )

[GOOD] (define-fun sbv.rat.notEq ((x SBVRational) (y SBVRational)) Bool
          (not (sbv.rat.eq x y))
       )

[GOOD] (define-fun sbv.rat.lt ((x SBVRational) (y SBVRational)) Bool
          (<  (* (sbv.rat.numerator   x) (sbv.rat.denominator y))
              (* (sbv.rat.denominator x) (sbv.rat.numerator   y)))
       )

[GOOD] (define-fun sbv.rat.leq ((x SBVRational) (y SBVRational)) Bool
          (<= (* (sbv.rat.numerator   x) (sbv.rat.denominator y))
              (* (sbv.rat.denominator x) (sbv.rat.numerator   y)))
       )
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Array SBVRational SBVRational)) ; tracks user variable "x"
[GOOD] (assert (forall ((array0 SBVRational)) (< 0 (sbv.rat.denominator (select s0 array0)))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () SBVRational (SBV.Rational 5 3))
[GOOD] (define-fun s3 () SBVRational (SBV.Rational 9 8))
[GOOD] (define-fun s2 () SBVRational (select s0 s1))
[GOOD] (define-fun s4 () Bool (sbv.rat.eq s2 s3))
[GOOD] (assert s4)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:Sat
DONE!
