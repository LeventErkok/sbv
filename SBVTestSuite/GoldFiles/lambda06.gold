** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has lambda expressions, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- Firstified function definitions
[GOOD] ; Firstified function: map :: (SInteger -> SInteger) -> [SInteger] -> [SInteger]
[GOOD] (define-fun-rec sbv.map_066528 ((lst (Seq Int))) (Seq Int)
                     (ite (= lst (as seq.empty (Seq Int)))
                          (as seq.empty (Seq Int))
                          (seq.++ (seq.unit (select (lambda ((args0 Int))
                 (let ((args1 (* args0 args0)))
                 (let ((args2 (+ args0 args1)))
                 (let ((args3 (* args0 args1)))
                 (let ((args4 (+ args2 args3)))
                 (let ((args5 (* args1 args1)))
                 (let ((args6 (+ args4 args5)))
                 (let ((args7 (* args0 args5)))
                 (let ((args8 (+ args6 args7)))
                 (let ((args9 (* args1 args5)))
                 (let ((args10 (+ args8 args9)))
                 (let ((args11 (* args0 args9)))
                 (let ((args12 (+ args10 args11)))
                 (let ((args13 (* args5 args5)))
                 (let ((args14 (+ args12 args13)))
                 (let ((args15 (* args0 args13)))
                 (let ((args16 (+ args14 args15)))
                 (let ((args17 (* args1 args13)))
                 (let ((args18 (+ args16 args17)))
                 args18))))))))))))))))))) (seq.nth lst 0)))
                                  (sbv.map_066528 (seq.extract lst 1 (- (seq.len lst) 1))))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () (Seq Int) (sbv.map_066528 s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 10)
               (seq.unit 2046)
               (seq.unit 88572)
               (seq.unit 1398100)
               (seq.unit 12207030))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 10)
               (seq.unit 2046)
               (seq.unit 88572)
               (seq.unit 1398100)
               (seq.unit 12207030))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =                      [1,2,3,4,5] :: [Integer]
  s1 = [10,2046,88572,1398100,12207030] :: [Integer]
