** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8) (seq.unit 9) (seq.unit 10)))
[GOOD] (define-fun s4 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s5 () (Seq Int) (seq.foldl (lambda ((l1_s0 (Seq Int)) (l1_s1 Int))
                                 (let ((l1_s2 2))
                                 (let ((l1_s4 0))
                                 (let ((l1_s8 1))
                                 (let ((l1_s14 (- 1)))
                                 (let ((l1_s22 (as seq.empty (Seq Int))))
                                 (let ((l1_s3 (mod l1_s1 l1_s2)))
                                 (let ((l1_s5 (>= l1_s1 l1_s4)))
                                 (let ((l1_s6 (= l1_s3 l1_s4)))
                                 (let ((l1_s7 (or l1_s5 l1_s6)))
                                 (let ((l1_s9 (ite l1_s7 l1_s4 l1_s8)))
                                 (let ((l1_s10 (* l1_s2 l1_s9)))
                                 (let ((l1_s11 (- l1_s3 l1_s10)))
                                 (let ((l1_s12 (> l1_s11 l1_s4)))
                                 (let ((l1_s13 (< l1_s11 l1_s4)))
                                 (let ((l1_s15 (ite l1_s13 l1_s14 l1_s11)))
                                 (let ((l1_s16 (ite l1_s12 l1_s8 l1_s15)))
                                 (let ((l1_s17 (= l1_s14 l1_s16)))
                                 (let ((l1_s18 (+ l1_s2 l1_s11)))
                                 (let ((l1_s19 (ite l1_s17 l1_s18 l1_s11)))
                                 (let ((l1_s20 (= l1_s4 l1_s19)))
                                 (let ((l1_s21 (seq.unit l1_s1)))
                                 (let ((l1_s23 (ite l1_s20 l1_s21 l1_s22)))
                                 (let ((l1_s24 (seq.++ l1_s0 l1_s23)))
                                 l1_s24)))))))))))))))))))))))) s4 s0))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6) (seq.unit 8) (seq.unit 10))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1)
               (seq.unit 2)
               (seq.unit 3)
               (seq.unit 4)
               (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6) (seq.unit 8) (seq.unit 10))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [1,2,3,4,5,6,7,8,9,10] :: [Integer]
  s1 =           [2,4,6,8,10] :: [Integer]
