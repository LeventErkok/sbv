** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun x_eu1 (Int) Int)
[GOOD] (declare-fun x_eu2 (Int) Int)
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s0 () Bool (forall ((l1_s0 Int))
                                 (let ((l1_s1 0))
                                 (let ((l1_s3 1))
                                 (let ((l1_s2 (= l1_s0 l1_s1)))
                                 (let ((l1_s4 (= l1_s0 l1_s3)))
                                 (let ((l1_s5 (or l1_s2 l1_s4)))
                                 (let ((l1_s6 (x_eu1 l1_s0)))
                                 (let ((l1_s7 (= l1_s1 l1_s6)))
                                 (let ((l1_s8 (= l1_s3 l1_s6)))
                                 (let ((l1_s9 (or l1_s7 l1_s8)))
                                 (let ((l1_s10 (x_eu2 l1_s0)))
                                 (let ((l1_s11 (= l1_s1 l1_s10)))
                                 (let ((l1_s12 (= l1_s3 l1_s10)))
                                 (let ((l1_s13 (or l1_s11 l1_s12)))
                                 (let ((l1_s14 (and l1_s9 l1_s13)))
                                 (let ((l1_s15 (= l1_s6 l1_s10)))
                                 (let ((l1_s16 (=> l1_s14 l1_s15)))
                                 (let ((l1_s17 (and l1_s5 l1_s16)))
                                 (let ((l1_s18 (not l1_s17)))
                                 l1_s18))))))))))))))))))))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s0)
[SEND] (check-sat)
[RECV] sat
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[SEND] (get-value (x_eu1))
[RECV] ((x_eu1 ((as const (Array Int Int)) 0)))
[SEND] (get-value (x_eu2))
[RECV] ((x_eu2 ((as const (Array Int Int)) 1)))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Satisfiable. Model:
  x_eu1 :: Integer -> Integer
  x_eu1 _ = 0

  x_eu2 :: Integer -> Integer
  x_eu2 _ = 1
