** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |bar @(SBV Integer -> SBV Integer)| :: SInteger -> SInteger
[GOOD] (define-fun |bar @(SBV Integer -> SBV Integer)| ((l1_s0 Int)) Int
                                 (let ((l1_s1 1))
                                 (let ((l1_s2 (+ l1_s0 l1_s1)))
                                 l1_s2)))
[GOOD] ; |foo @(SBV Integer -> SBV Integer)| :: SInteger -> SInteger [Refers to: |bar @(SBV Integer -> SBV Integer)|]
[GOOD] (define-fun |foo @(SBV Integer -> SBV Integer)| ((l1_s0 Int)) Int
                                 (let ((l1_s2 1))
                                 (let ((l1_s1 (|bar @(SBV Integer -> SBV Integer)| l1_s0)))
                                 (let ((l1_s3 (+ l1_s1 l1_s2)))
                                 l1_s3))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (|bar @(SBV Integer -> SBV Integer)| s0))
[GOOD] (define-fun s2 () Int (|foo @(SBV Integer -> SBV Integer)| s0))
[GOOD] (define-fun s3 () Int (+ s1 s2))
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (declare-fun s5 () Int)
[GOOD] (define-fun s6 () Int (|bar @(SBV Integer -> SBV Integer)| s5))
[GOOD] (define-fun s7 () Int (|foo @(SBV Integer -> SBV Integer)| s5))
[GOOD] (define-fun s8 () Int (+ s6 s7))
[GOOD] (define-fun s9 () Bool (= s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (- 3)))
[SEND] (get-value (s5))
[RECV] ((s5 (- 3)))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = -3 :: Integer
  s5 = -3 :: Integer
