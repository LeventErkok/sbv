** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun F (Int Int) Int)
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s0 () Bool (forall ((l1_s0 Int) (l1_s1 Int))
         (let ((l1_s3 2))
         (let ((l1_s5 3))
         (let ((l1_s2 (F l1_s0 l1_s1)))
         (let ((l1_s4 (* l1_s0 l1_s3)))
         (let ((l1_s6 (- l1_s5 l1_s1)))
         (let ((l1_s7 (+ l1_s4 l1_s6)))
         (let ((l1_s8 (= l1_s2 l1_s7)))
         l1_s8)))))))))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s0)
[SEND] (check-sat)
[RECV] sat
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[SEND] (get-value (F))
[RECV] ((F (lambda ((x!1 Int) (x!2 Int)) (+ 3 (* 2 x!1) (* (- 1) x!2)))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Satisfiable. Model:
  F :: Integer -> Integer -> Integer
  F x y = 3 + 2 * x + (-y)
