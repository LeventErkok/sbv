** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: E
[GOOD] (declare-datatype E (
           (A)
           (B)
           (C)
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 1)
[GOOD] (define-fun s6 () (Seq Bool) (seq.unit true))
[GOOD] (define-fun s11 () Int 3)
[GOOD] (define-fun s13 () Int 2)
[GOOD] (define-fun s16 () E (as C E))
[GOOD] (define-fun s20 () Int 6)
[GOOD] (define-fun s22 () Int 4)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 E (Seq Bool)))) ; tracks user variable "v1"
[GOOD] (declare-fun s1 () Bool) ; tracks user variable "q"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s2 () Bool (not s1))
[GOOD] (define-fun s4 () (SBVTuple2 E (Seq Bool)) (seq.nth s0 s3))
[GOOD] (define-fun s5 () (Seq Bool) (proj_2_SBVTuple2 s4))
[GOOD] (define-fun s7 () (Seq Bool) (seq.unit s1))
[GOOD] (define-fun s8 () (Seq Bool) (seq.++ s6 s7))
[GOOD] (define-fun s9 () Bool (= s5 s8))
[GOOD] (define-fun s10 () Int (seq.len s0))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s14 () (SBVTuple2 E (Seq Bool)) (seq.nth s0 s13))
[GOOD] (define-fun s15 () E (proj_1_SBVTuple2 s14))
[GOOD] (define-fun s17 () Bool (= s15 s16))
[GOOD] (define-fun s18 () (Seq Bool) (proj_2_SBVTuple2 s14))
[GOOD] (define-fun s19 () Int (seq.len s18))
[GOOD] (define-fun s21 () Bool (= s19 s20))
[GOOD] (define-fun s23 () Bool (seq.nth s18 s22))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s2)
[GOOD] (assert s9)
[GOOD] (assert s12)
[GOOD] (assert s17)
[GOOD] (assert s21)
[GOOD] (assert s23)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (declare-datatypes ((SBVTuple3 3)) ((par (T1 T2 T3)
                                           ((mkSBVTuple3 (proj_1_SBVTuple3 T1)
                                                         (proj_2_SBVTuple3 T2)
                                                         (proj_3_SBVTuple3 T3))))))
[GOOD] (declare-fun s24 () (SBVTuple2 (_ BitVec 8) (SBVTuple3 E String Int)))
[GOOD] (assert (= 1 (str.len (proj_2_SBVTuple3 (proj_2_SBVTuple2 s24)))))
[GOOD] (define-fun s25 () (SBVTuple2 (_ BitVec 8) (SBVTuple3 E String Int)) (mkSBVTuple2 #x05 (mkSBVTuple3 (as C E) (_ char #x41) 812)))
[GOOD] (define-fun s26 () Bool (= s24 s25))
[GOOD] (assert s26)
[GOOD] (define-fun s27 () (Seq (SBVTuple2 E (Seq Bool))) (seq.++ (seq.unit (mkSBVTuple2 (as B E) (as seq.empty (Seq Bool)))) (seq.unit (mkSBVTuple2 (as A E) (seq.++ (seq.unit true) (seq.unit false)))) (seq.unit (mkSBVTuple2 (as C E) (seq.++ (seq.unit false) (seq.unit false) (seq.unit false) (seq.unit false) (seq.unit true) (seq.unit false))))))
[GOOD] (define-fun s28 () Bool (= s0 s27))
[GOOD] (assert s28)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 B (as seq.empty (Seq Bool))))
               (seq.unit (mkSBVTuple2 A (seq.++ (seq.unit true) (seq.unit false))))
               (seq.unit (mkSBVTuple2 C
                                      (seq.++ (seq.unit false)
                                              (seq.unit false)
                                              (seq.unit false)
                                              (seq.unit false)
                                              (seq.++ (seq.unit true) (seq.unit false))))))))
[SEND] (get-value (s24))
[RECV] ((s24 (mkSBVTuple2 #x05 (mkSBVTuple3 C "A" 812))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: ([(B,[]),(A,[True,False]),(C,[False,False,False,False,True,False])],(5,(C,'A',812)))
DONE!
