** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s4 () Int 1)
[GOOD] (define-fun s81 () Int 10)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "ints"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () Int (- s1 s4))
[GOOD] (define-fun s6 () (Seq Int) (seq.extract s0 s4 s5))
[GOOD] (define-fun s7 () Int (seq.len s6))
[GOOD] (define-fun s8 () Bool (= s2 s7))
[GOOD] (define-fun s9 () Int (seq.nth s0 s2))
[GOOD] (define-fun s10 () Bool (<= s9 s2))
[GOOD] (define-fun s11 () Int (ite s10 s2 s9))
[GOOD] (define-fun s12 () Int (- s7 s4))
[GOOD] (define-fun s13 () (Seq Int) (seq.extract s6 s4 s12))
[GOOD] (define-fun s14 () Int (seq.len s13))
[GOOD] (define-fun s15 () Bool (= s2 s14))
[GOOD] (define-fun s16 () Int (seq.nth s6 s2))
[GOOD] (define-fun s17 () Bool (<= s16 s11))
[GOOD] (define-fun s18 () Int (ite s17 s11 s16))
[GOOD] (define-fun s19 () Int (- s14 s4))
[GOOD] (define-fun s20 () (Seq Int) (seq.extract s13 s4 s19))
[GOOD] (define-fun s21 () Int (seq.len s20))
[GOOD] (define-fun s22 () Bool (= s2 s21))
[GOOD] (define-fun s23 () Int (seq.nth s13 s2))
[GOOD] (define-fun s24 () Bool (<= s23 s18))
[GOOD] (define-fun s25 () Int (ite s24 s18 s23))
[GOOD] (define-fun s26 () Int (- s21 s4))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s20 s4 s26))
[GOOD] (define-fun s28 () Int (seq.len s27))
[GOOD] (define-fun s29 () Bool (= s2 s28))
[GOOD] (define-fun s30 () Int (seq.nth s20 s2))
[GOOD] (define-fun s31 () Bool (<= s30 s25))
[GOOD] (define-fun s32 () Int (ite s31 s25 s30))
[GOOD] (define-fun s33 () Int (- s28 s4))
[GOOD] (define-fun s34 () (Seq Int) (seq.extract s27 s4 s33))
[GOOD] (define-fun s35 () Int (seq.len s34))
[GOOD] (define-fun s36 () Bool (= s2 s35))
[GOOD] (define-fun s37 () Int (seq.nth s27 s2))
[GOOD] (define-fun s38 () Bool (<= s37 s32))
[GOOD] (define-fun s39 () Int (ite s38 s32 s37))
[GOOD] (define-fun s40 () Int (- s35 s4))
[GOOD] (define-fun s41 () (Seq Int) (seq.extract s34 s4 s40))
[GOOD] (define-fun s42 () Int (seq.len s41))
[GOOD] (define-fun s43 () Bool (= s2 s42))
[GOOD] (define-fun s44 () Int (seq.nth s34 s2))
[GOOD] (define-fun s45 () Bool (<= s44 s39))
[GOOD] (define-fun s46 () Int (ite s45 s39 s44))
[GOOD] (define-fun s47 () Int (- s42 s4))
[GOOD] (define-fun s48 () (Seq Int) (seq.extract s41 s4 s47))
[GOOD] (define-fun s49 () Int (seq.len s48))
[GOOD] (define-fun s50 () Bool (= s2 s49))
[GOOD] (define-fun s51 () Int (seq.nth s41 s2))
[GOOD] (define-fun s52 () Bool (<= s51 s46))
[GOOD] (define-fun s53 () Int (ite s52 s46 s51))
[GOOD] (define-fun s54 () Int (- s49 s4))
[GOOD] (define-fun s55 () (Seq Int) (seq.extract s48 s4 s54))
[GOOD] (define-fun s56 () Int (seq.len s55))
[GOOD] (define-fun s57 () Bool (= s2 s56))
[GOOD] (define-fun s58 () Int (seq.nth s48 s2))
[GOOD] (define-fun s59 () Bool (<= s58 s53))
[GOOD] (define-fun s60 () Int (ite s59 s53 s58))
[GOOD] (define-fun s61 () Int (- s56 s4))
[GOOD] (define-fun s62 () (Seq Int) (seq.extract s55 s4 s61))
[GOOD] (define-fun s63 () Int (seq.len s62))
[GOOD] (define-fun s64 () Bool (= s2 s63))
[GOOD] (define-fun s65 () Int (seq.nth s55 s2))
[GOOD] (define-fun s66 () Bool (<= s65 s60))
[GOOD] (define-fun s67 () Int (ite s66 s60 s65))
[GOOD] (define-fun s68 () Int (seq.nth s62 s2))
[GOOD] (define-fun s69 () Bool (<= s68 s67))
[GOOD] (define-fun s70 () Int (ite s69 s67 s68))
[GOOD] (define-fun s71 () Int (ite s64 s67 s70))
[GOOD] (define-fun s72 () Int (ite s57 s60 s71))
[GOOD] (define-fun s73 () Int (ite s50 s53 s72))
[GOOD] (define-fun s74 () Int (ite s43 s46 s73))
[GOOD] (define-fun s75 () Int (ite s36 s39 s74))
[GOOD] (define-fun s76 () Int (ite s29 s32 s75))
[GOOD] (define-fun s77 () Int (ite s22 s25 s76))
[GOOD] (define-fun s78 () Int (ite s15 s18 s77))
[GOOD] (define-fun s79 () Int (ite s8 s11 s78))
[GOOD] (define-fun s80 () Int (ite s3 s2 s79))
[GOOD] (define-fun s82 () Bool (> s80 s81))
[GOOD] (define-fun s83 () Bool (< s9 s2))
[GOOD] (define-fun s84 () Bool (> s9 s81))
[GOOD] (define-fun s85 () Bool (or s83 s84))
[GOOD] (define-fun s86 () Bool (< s16 s2))
[GOOD] (define-fun s87 () Bool (> s16 s81))
[GOOD] (define-fun s88 () Bool (or s86 s87))
[GOOD] (define-fun s89 () Bool (or s85 s88))
[GOOD] (define-fun s90 () Bool (< s23 s2))
[GOOD] (define-fun s91 () Bool (> s23 s81))
[GOOD] (define-fun s92 () Bool (or s90 s91))
[GOOD] (define-fun s93 () Bool (or s89 s92))
[GOOD] (define-fun s94 () Bool (< s30 s2))
[GOOD] (define-fun s95 () Bool (> s30 s81))
[GOOD] (define-fun s96 () Bool (or s94 s95))
[GOOD] (define-fun s97 () Bool (or s93 s96))
[GOOD] (define-fun s98 () Bool (< s37 s2))
[GOOD] (define-fun s99 () Bool (> s37 s81))
[GOOD] (define-fun s100 () Bool (or s98 s99))
[GOOD] (define-fun s101 () Bool (or s97 s100))
[GOOD] (define-fun s102 () Bool (< s44 s2))
[GOOD] (define-fun s103 () Bool (> s44 s81))
[GOOD] (define-fun s104 () Bool (or s102 s103))
[GOOD] (define-fun s105 () Bool (or s101 s104))
[GOOD] (define-fun s106 () Bool (< s51 s2))
[GOOD] (define-fun s107 () Bool (> s51 s81))
[GOOD] (define-fun s108 () Bool (or s106 s107))
[GOOD] (define-fun s109 () Bool (or s105 s108))
[GOOD] (define-fun s110 () Bool (< s58 s2))
[GOOD] (define-fun s111 () Bool (> s58 s81))
[GOOD] (define-fun s112 () Bool (or s110 s111))
[GOOD] (define-fun s113 () Bool (or s109 s112))
[GOOD] (define-fun s114 () Bool (< s65 s2))
[GOOD] (define-fun s115 () Bool (> s65 s81))
[GOOD] (define-fun s116 () Bool (or s114 s115))
[GOOD] (define-fun s117 () Bool (or s113 s116))
[GOOD] (define-fun s118 () Bool (< s68 s2))
[GOOD] (define-fun s119 () Bool (> s68 s81))
[GOOD] (define-fun s120 () Bool (or s118 s119))
[GOOD] (define-fun s121 () Bool (or s117 s120))
[GOOD] (define-fun s122 () Bool (ite s64 s117 s121))
[GOOD] (define-fun s123 () Bool (ite s57 s113 s122))
[GOOD] (define-fun s124 () Bool (ite s50 s109 s123))
[GOOD] (define-fun s125 () Bool (ite s43 s105 s124))
[GOOD] (define-fun s126 () Bool (ite s36 s101 s125))
[GOOD] (define-fun s127 () Bool (ite s29 s97 s126))
[GOOD] (define-fun s128 () Bool (ite s22 s93 s127))
[GOOD] (define-fun s129 () Bool (ite s15 s89 s128))
[GOOD] (define-fun s130 () Bool (ite s8 s85 s129))
[GOOD] (define-fun s131 () Bool (not s3))
[GOOD] (define-fun s132 () Bool (and s130 s131))
[GOOD] (define-fun s133 () Bool (=> s82 s132))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s133)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
