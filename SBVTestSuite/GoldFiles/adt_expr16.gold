** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (
           (Val (getVal_1 Int))
           (Var (getVar_1 String))
           (Add (getAdd_1 Expr) (getAdd_2 Expr))
           (Mul (getMul_1 Expr) (getMul_2 Expr))
           (Let (getLet_1 String) (getLet_2 Expr) (getLet_3 Expr))
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () String "a")
[GOOD] (define-fun s1 () Int 3)
[GOOD] (define-fun s3 () Int 4)
[GOOD] (define-fun s14 () Int 0)
[GOOD] (define-fun s15 () String "b")
[GOOD] (define-fun s17 () String "c")
[GOOD] (define-fun s21 () Int 1)
[GOOD] (define-fun s22 () Int 2)
[GOOD] (define-fun s25 () Int 10)
[GOOD] (define-fun s32 () Int 5)
[GOOD] (define-fun s33 () Int 6)
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s2 () Expr (Val s1))
[GOOD] (define-fun s4 () Expr (Val s3))
[GOOD] (define-fun s5 () Expr (Add s2 s4))
[GOOD] (define-fun s6 () Expr (Mul s2 s5))
[GOOD] (define-fun s7 () Expr (Var s0))
[GOOD] (define-fun s8 () Expr (Add s7 s5))
[GOOD] (define-fun s9 () Expr (Let s0 s6 s8))
[GOOD] (define-fun s10 () Bool (is-Var s9))
[GOOD] (define-fun s11 () String (getVar_1 s9))
[GOOD] (define-fun s12 () Bool (= s0 s11))
[GOOD] (define-fun s13 () Bool (and s10 s12))
[GOOD] (define-fun s16 () Bool (= s11 s15))
[GOOD] (define-fun s18 () Bool (= s11 s17))
[GOOD] (define-fun s19 () Bool (or s16 s18))
[GOOD] (define-fun s20 () Bool (and s10 s19))
[GOOD] (define-fun s23 () Bool (is-Val s9))
[GOOD] (define-fun s24 () Int (getVal_1 s9))
[GOOD] (define-fun s26 () Bool (< s24 s25))
[GOOD] (define-fun s27 () Bool (and s23 s26))
[GOOD] (define-fun s28 () Bool (= s24 s25))
[GOOD] (define-fun s29 () Bool (and s23 s28))
[GOOD] (define-fun s30 () Bool (> s24 s25))
[GOOD] (define-fun s31 () Bool (and s23 s30))
[GOOD] (define-fun s34 () Int (ite s31 s32 s33))
[GOOD] (define-fun s35 () Int (ite s29 s3 s34))
[GOOD] (define-fun s36 () Int (ite s27 s1 s35))
[GOOD] (define-fun s37 () Int (ite s10 s22 s36))
[GOOD] (define-fun s38 () Int (ite s20 s21 s37))
[GOOD] (define-fun s39 () Int (ite s13 s14 s38))
[GOOD] (define-fun s40 () Bool (distinct s33 s39))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s40)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
