** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (par (nm val) (
           (Val (getVal_1 val))
           (Var (getVar_1 nm))
           (Add (getAdd_1 (Expr nm val)) (getAdd_2 (Expr nm val)))
           (Mul (getMul_1 (Expr nm val)) (getMul_2 (Expr nm val)))
           (Let (getLet_1 nm) (getLet_2 (Expr nm val)) (getLet_3 (Expr nm val)))
       )))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () (Expr String Int) ((as Var (Expr String Int)) "d"))
[GOOD] (define-fun s2 () String "a")
[GOOD] (define-fun s4 () Int 0)
[GOOD] (define-fun s5 () String "b")
[GOOD] (define-fun s7 () String "c")
[GOOD] (define-fun s10 () Int 1)
[GOOD] (define-fun s11 () Int 2)
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () String (getVar_1 s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s8 () Bool (= s1 s7))
[GOOD] (define-fun s9 () Bool (or s6 s8))
[GOOD] (define-fun s12 () Int (ite s9 s10 s11))
[GOOD] (define-fun s13 () Int (ite s3 s4 s12))
[GOOD] (define-fun s14 () Bool (distinct s11 s13))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
