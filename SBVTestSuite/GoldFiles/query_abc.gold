** Calling: abc -S "%blast; &sweep -C 5000; &syn4; &cec -s -m -C 2000"
[ISSUE] ; Automatically generated by SBV. Do not edit.
** Skipping heart-beat for the solver ABC
** Backend solver ABC does not support global decls.
** Some incremental calls, such as pop, will be limited.
[ISSUE] (set-option :diagnostic-output-channel "stdout")
[ISSUE] (set-option :produce-models true)
[ISSUE] (set-logic ALL) ; external query, using all logics.
[ISSUE] ; --- tuples ---
[ISSUE] ; --- sums ---
[ISSUE] ; --- literal constants ---
[ISSUE] (define-fun s2 () (_ BitVec 32) #x00000000)
[ISSUE] ; --- top level inputs ---
[ISSUE] (declare-fun s0 () (_ BitVec 32)) ; tracks user variable "a"
[ISSUE] (declare-fun s1 () (_ BitVec 32)) ; tracks user variable "b"
[ISSUE] ; --- constant tables ---
[ISSUE] ; --- non-constant tables ---
[ISSUE] ; --- uninterpreted constants ---
[ISSUE] ; --- user defined functions ---
[ISSUE] ; --- assignments ---
[ISSUE] (define-fun s3 () Bool (bvsgt s0 s2))
[ISSUE] (define-fun s4 () Bool (bvsgt s1 s2))
[ISSUE] ; --- delayedEqualities ---
[ISSUE] ; --- formula ---
[ISSUE] (assert s3)
[ISSUE] (assert s4)
[FIRE] (define-fun s5 () (_ BitVec 32) #x00000002)
[FIRE] (define-fun s7 () (_ BitVec 32) #x0000000f)
[FIRE] (define-fun s6 () (_ BitVec 32) (bvadd s0 s5))
[FIRE] (define-fun s8 () Bool (bvsle s6 s7))
[FIRE] (assert s8)
[FIRE] (define-fun s9 () Bool (bvslt s0 s5))
[FIRE] (assert s9)
[FIRE] (define-fun s10 () Bool (bvslt s1 s5))
[FIRE] (assert s10)
[FIRE] (define-fun s12 () (_ BitVec 32) #x0000000c)
[FIRE] (define-fun s11 () (_ BitVec 32) (bvadd s0 s1))
[FIRE] (define-fun s13 () Bool (bvslt s11 s12))
[FIRE] (assert s13)
[FIRE] (assert s9)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x1))
[SEND] (get-value (s1))
[RECV] ((s1 #x1))
*** Solver   : ABC
*** Exit code: ExitSuccess
*** Std-err  : Cmd warning: redefining '%graft'
