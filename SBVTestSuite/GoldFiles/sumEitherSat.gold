** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Either
[GOOD] (declare-datatype Either (par (a b) (
           (Left (getLeft_1 a))
           (Right (getRight_1 b))
       )))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 0)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Either Int Bool)) ; tracks user variable "x"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Bool ((as is-Left Bool) s0))
[GOOD] (define-fun s2 () Int (getLeft_1 s0))
[GOOD] (define-fun s4 () Bool (> s2 s3))
[GOOD] (define-fun s5 () Bool (getRight_1 s0))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () Bool (ite s1 s4 s6))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (Right false)))

MODEL: SMTModel {modelObjectives = [], modelBindings = Nothing, modelAssocs = [("x",Right False :: Either Integer Bool)], modelUIFuns = []}
DONE.*** Solver   : Z3
*** Exit code: ExitSuccess
