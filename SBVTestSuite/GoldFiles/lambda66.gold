** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] ; has special relations, no logic set.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun U (Int Int) Bool)
[GOOD] (declare-fun __internal_sbv__TransitiveClosure_tcU_ (Int Int) Bool)
[GOOD] (declare-fun tcU (Int Int) Bool)
[GOOD] (assert (forall ((x Int) (y Int)) (= (tcU x y) ((_ transitive-closure __internal_sbv__TransitiveClosure_tcU_) x y))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s0 () Bool (forall ((l1_s0 Int) (l1_s1 Int))
                                 (let ((l1_s2 (U l1_s0 l1_s1)))
                                 (let ((l1_s3 (__internal_sbv__TransitiveClosure_tcU_ l1_s0 l1_s1)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 l1_s4)))))
[GOOD] (define-fun s1 () Bool (forall ((l1_s0 Int) (l1_s1 Int) (l1_s2 Int))
                                 (let ((l1_s3 (U l1_s0 l1_s1)))
                                 (let ((l1_s4 (U l1_s1 l1_s2)))
                                 (let ((l1_s5 (and l1_s3 l1_s4)))
                                 (let ((l1_s6 (tcU l1_s0 l1_s2)))
                                 (let ((l1_s7 (=> l1_s5 l1_s6)))
                                 l1_s7)))))))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s0)
[GOOD] (assert (not s1))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Q.E.D.
