** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8) (seq.unit 9) (seq.unit 10)))
[GOOD] (define-fun s5 () (Seq Int) (seq.++ (seq.unit 10) (seq.unit 9) (seq.unit 8) (seq.unit 7) (seq.unit 6) (seq.unit 5) (seq.unit 4) (seq.unit 3) (seq.unit 2) (seq.unit 1)))
[GOOD] (define-fun s7 () Int 0)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] (declare-fun s2 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.zip @(Integer,Integer)| :: [SInteger] -> [SInteger] -> [(SInteger, SInteger)] [Recursive]
[GOOD] (define-fun-rec |sbv.zip @(Integer,Integer)| ((l1_s0 (Seq Int)) (l1_s1 (Seq Int))) (Seq (SBVTuple2 Int Int))
                                 (let ((l1_s3 0))
                                 (let ((l1_s8 (as seq.empty (Seq (SBVTuple2 Int Int)))))
                                 (let ((l1_s13 1))
                                 (let ((l1_s2 (seq.len l1_s0)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 (let ((l1_s5 (seq.len l1_s1)))
                                 (let ((l1_s6 (= l1_s3 l1_s5)))
                                 (let ((l1_s7 (or l1_s4 l1_s6)))
                                 (let ((l1_s9 (seq.nth l1_s0 l1_s3)))
                                 (let ((l1_s10 (seq.nth l1_s1 l1_s3)))
                                 (let ((l1_s11 ((as mkSBVTuple2 (SBVTuple2 Int Int)) l1_s9 l1_s10)))
                                 (let ((l1_s12 (seq.unit l1_s11)))
                                 (let ((l1_s14 (- l1_s2 l1_s13)))
                                 (let ((l1_s15 (seq.extract l1_s0 l1_s13 l1_s14)))
                                 (let ((l1_s16 (- l1_s5 l1_s13)))
                                 (let ((l1_s17 (seq.extract l1_s1 l1_s13 l1_s16)))
                                 (let ((l1_s18 (|sbv.zip @(Integer,Integer)| l1_s15 l1_s17)))
                                 (let ((l1_s19 (seq.++ l1_s12 l1_s18)))
                                 (let ((l1_s20 (ite l1_s7 l1_s8 l1_s19)))
                                 l1_s20))))))))))))))))))))
[GOOD] ; |sbv.map @((Integer,Integer),Integer)_1fd06f7602| :: [(SInteger, SInteger)] -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.map @((Integer,Integer),Integer)_1fd06f7602| ((l1_s0 (Seq (SBVTuple2 Int Int)))) (Seq Int)
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 (as seq.empty (Seq Int))))
                                 (let ((l1_s10 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (seq.nth l1_s0 l1_s2)))
                                 (let ((l1_s6 (proj_1_SBVTuple2 l1_s5)))
                                 (let ((l1_s7 (proj_2_SBVTuple2 l1_s5)))
                                 (let ((l1_s8 (+ l1_s6 l1_s7)))
                                 (let ((l1_s9 (seq.unit l1_s8)))
                                 (let ((l1_s11 (- l1_s1 l1_s10)))
                                 (let ((l1_s12 (seq.extract l1_s0 l1_s10 l1_s11)))
                                 (let ((l1_s13 (|sbv.map @((Integer,Integer),Integer)_1fd06f7602| l1_s12)))
                                 (let ((l1_s14 (seq.++ l1_s9 l1_s13)))
                                 (let ((l1_s15 (ite l1_s3 l1_s4 l1_s14)))
                                 l1_s15))))))))))))))))
[GOOD] ; |sbv.foldr @(Integer,Integer)_d8dc9e6fbd| :: SInteger -> [SInteger] -> SInteger [Recursive]
[GOOD] (define-fun-rec |sbv.foldr @(Integer,Integer)_d8dc9e6fbd| ((l1_s0 Int) (l1_s1 (Seq Int))) Int
                                 (let ((l1_s3 0))
                                 (let ((l1_s6 1))
                                 (let ((l1_s2 (seq.len l1_s1)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 (let ((l1_s5 (seq.nth l1_s1 l1_s3)))
                                 (let ((l1_s7 (- l1_s2 l1_s6)))
                                 (let ((l1_s8 (seq.extract l1_s1 l1_s6 l1_s7)))
                                 (let ((l1_s9 (|sbv.foldr @(Integer,Integer)_d8dc9e6fbd| l1_s0 l1_s8)))
                                 (let ((l1_s10 (+ l1_s5 l1_s9)))
                                 (let ((l1_s11 (ite l1_s4 l1_s0 l1_s10)))
                                 l1_s11)))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s8 () (Seq (SBVTuple2 Int Int)) (|sbv.zip @(Integer,Integer)| s0 s1))
[GOOD] (define-fun s9 () (Seq Int) (|sbv.map @((Integer,Integer),Integer)_1fd06f7602| s8))
[GOOD] (define-fun s10 () Int (|sbv.foldr @(Integer,Integer)_d8dc9e6fbd| s7 s9))
[GOOD] (define-fun s11 () Bool (= s2 s10))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s6)
[GOOD] (assert s11)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s2))
[RECV] ((s2 110))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1)
               (seq.unit 2)
               (seq.unit 3)
               (seq.unit 4)
               (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 10)
               (seq.unit 9)
               (seq.unit 8)
               (seq.unit 7)
               (seq.unit 6)
               (seq.unit 5)
               (seq.unit 4)
               (seq.unit 3)
               (seq.unit 2)
               (seq.unit 1))))
[SEND] (get-value (s2))
[RECV] ((s2 110))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [1,2,3,4,5,6,7,8,9,10] :: [Integer]
  s1 = [10,9,8,7,6,5,4,3,2,1] :: [Integer]
  s2 =                    110 :: Integer
