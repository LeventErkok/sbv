** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8) (seq.unit 9) (seq.unit 10)))
[GOOD] (define-fun s5 () (Seq Int) (seq.++ (seq.unit 10) (seq.unit 9) (seq.unit 8) (seq.unit 7) (seq.unit 6) (seq.unit 5) (seq.unit 4) (seq.unit 3) (seq.unit 2) (seq.unit 1)))
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s10 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] (declare-fun s2 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- SBV Function definitions
[GOOD] (define-fun-rec |sbv.reverse_@[SInteger]| ((lst (Seq Int))) (Seq Int)
                       (ite (= lst (as seq.empty (Seq Int)))
                            (as seq.empty (Seq Int))
                            (seq.++ (|sbv.reverse_@[SInteger]| (seq.extract lst 1 (- (seq.len lst) 1))) (seq.unit (seq.nth lst 0)))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s8 () Int (seq.len s1))
[GOOD] (define-fun s9 () Bool (<= s8 s7))
[GOOD] (define-fun s11 () Int (seq.len s0))
[GOOD] (define-fun s12 () Bool (>= s8 s11))
[GOOD] (define-fun s13 () (Seq Int) (seq.extract s0 s7 s8))
[GOOD] (define-fun s14 () (Seq Int) (ite s12 s0 s13))
[GOOD] (define-fun s15 () (Seq Int) (ite s9 s10 s14))
[GOOD] (define-fun s16 () (Seq (SBVTuple2 Int Int)) (seq.mapi (lambda ((l1_s0 Int) (l1_s1 Int))
         ((as mkSBVTuple2 (SBVTuple2 Int Int)) l1_s0 l1_s1)) s7 s15))
[GOOD] (define-fun s17 () (Seq (SBVTuple2 Int Int)) (seq.map (lambda ((l1_s0 (SBVTuple2 Int Int)))
                                 (let ((l1_s1 (proj_2_SBVTuple2 l1_s0)))
                                 (let ((l1_s2 (proj_1_SBVTuple2 l1_s0)))
                                 (let ((l1_s3 (seq.nth s1 l1_s2)))
                                 (let ((l1_s4 ((as mkSBVTuple2 (SBVTuple2 Int Int)) l1_s1 l1_s3)))
                                 l1_s4))))) s16))
[GOOD] (define-fun s18 () (Seq Int) (seq.map (lambda ((l1_s0 (SBVTuple2 Int Int)))
                                 (let ((l1_s1 (proj_1_SBVTuple2 l1_s0)))
                                 (let ((l1_s2 (proj_2_SBVTuple2 l1_s0)))
                                 (let ((l1_s3 (+ l1_s1 l1_s2)))
                                 l1_s3)))) s17))
[GOOD] (define-fun s19 () (Seq Int) (|sbv.reverse_@[SInteger]| s18))
[GOOD] (define-fun s20 () Int (seq.foldl (lambda ((l1_s0 Int) (l1_s1 Int))
         (+ l1_s0 l1_s1)) s7 s19))
[GOOD] (define-fun s21 () Bool (= s2 s20))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s6)
[GOOD] (assert s21)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s2))
[RECV] ((s2 110))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1)
               (seq.unit 2)
               (seq.unit 3)
               (seq.unit 4)
               (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 10)
               (seq.unit 9)
               (seq.unit 8)
               (seq.unit 7)
               (seq.unit 6)
               (seq.unit 5)
               (seq.unit 4)
               (seq.unit 3)
               (seq.unit 2)
               (seq.unit 1))))
[SEND] (get-value (s2))
[RECV] ((s2 110))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [1,2,3,4,5,6,7,8,9,10] :: [Integer]
  s1 = [10,9,8,7,6,5,4,3,2,1] :: [Integer]
  s2 =                    110 :: Integer
