** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has user-defined sorts, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] (declare-sort Q 0)  ; N.B. Uninterpreted sort.
[GOOD] (declare-fun Q_witness () Q)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun c () Q)
[GOOD] (declare-fun d () Q)
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s0 () Q c)
[GOOD] (define-fun s1 () Q d)
[GOOD] (define-fun s2 () Bool (distinct s0 s1))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s2)
*** Checking Satisfiability, all solutions..
*** SBV.allSat: Uninterpreted function: c :: Q
*** Will *not* be used in allSat considerations since its type
*** has uninterpreted sorts present.
*** SBV.allSat: Uninterpreted function: d :: Q
*** Will *not* be used in allSat considerations since its type
*** has uninterpreted sorts present.
*** SBV.allSat: Uninterpreted sorts present: Q
***             SBV will use equivalence classes to generate all-satisfying instances.
Looking for solution 1
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (c))
[RECV] ((c Q!val!0))
[SEND] (get-value (d))
[RECV] ((d Q!val!1))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:Solution #1:
  c = Q!val!0 :: Q
  d = Q!val!1 :: Q
This is the only solution.
DONE!
