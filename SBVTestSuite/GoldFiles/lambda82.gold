** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq (Seq Int)))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.map @SBV Integer -> SBV [Integer]_136c80b6a3 @SBV [Integer] -> SBV [[Integer]]| :: [SInteger] -> [[SInteger]] [Recursive]
[GOOD] (define-fun-rec |sbv.map @SBV Integer -> SBV [Integer]_136c80b6a3 @SBV [Integer] -> SBV [[Integer]]| ((l1_s0 (Seq Int))) (Seq (Seq Int))
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 (as seq.empty (Seq (Seq Int)))))
                                 (let ((l1_s6 4))
                                 (let ((l1_s9 5))
                                 (let ((l1_s12 6))
                                 (let ((l1_s15 (as seq.empty (Seq Int))))
                                 (let ((l1_s20 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (seq.nth l1_s0 l1_s2)))
                                 (let ((l1_s7 (+ l1_s5 l1_s6)))
                                 (let ((l1_s8 (seq.unit l1_s7)))
                                 (let ((l1_s10 (+ l1_s5 l1_s9)))
                                 (let ((l1_s11 (seq.unit l1_s10)))
                                 (let ((l1_s13 (+ l1_s5 l1_s12)))
                                 (let ((l1_s14 (seq.unit l1_s13)))
                                 (let ((l1_s16 (seq.++ l1_s14 l1_s15)))
                                 (let ((l1_s17 (seq.++ l1_s11 l1_s16)))
                                 (let ((l1_s18 (seq.++ l1_s8 l1_s17)))
                                 (let ((l1_s19 (seq.unit l1_s18)))
                                 (let ((l1_s21 (- l1_s1 l1_s20)))
                                 (let ((l1_s22 (seq.extract l1_s0 l1_s20 l1_s21)))
                                 (let ((l1_s23 (|sbv.map @SBV Integer -> SBV [Integer]_136c80b6a3 @SBV [Integer] -> SBV [[Integer]]| l1_s22)))
                                 (let ((l1_s24 (seq.++ l1_s19 l1_s23)))
                                 (let ((l1_s25 (ite l1_s3 l1_s4 l1_s24)))
                                 l1_s25))))))))))))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () (Seq (Seq Int)) (|sbv.map @SBV Integer -> SBV [Integer]_136c80b6a3 @SBV [Integer] -> SBV [[Integer]]| s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit (seq.++ (seq.unit 5) (seq.unit 6) (seq.unit 7)))
               (seq.unit (seq.++ (seq.unit 6) (seq.unit 7) (seq.unit 8)))
               (seq.unit (seq.++ (seq.unit 7) (seq.unit 8) (seq.unit 9)))
               (seq.unit (seq.++ (seq.unit 8) (seq.unit 9) (seq.unit 10)))
               (seq.unit (seq.++ (seq.unit 9) (seq.unit 10) (seq.unit 11))))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit (seq.++ (seq.unit 5) (seq.unit 6) (seq.unit 7)))
               (seq.unit (seq.++ (seq.unit 6) (seq.unit 7) (seq.unit 8)))
               (seq.unit (seq.++ (seq.unit 7) (seq.unit 8) (seq.unit 9)))
               (seq.unit (seq.++ (seq.unit 8) (seq.unit 9) (seq.unit 10)))
               (seq.unit (seq.++ (seq.unit 9) (seq.unit 10) (seq.unit 11))))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =                                  [1,2,3,4,5] :: [Integer]
  s1 = [[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11]] :: [[Integer]]
