** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s4 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] (define-fun s5 () Int 1)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "xs"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s6 () Int (- s1 s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.extract s0 s5 s6))
[GOOD] (define-fun s8 () Int (seq.len s7))
[GOOD] (define-fun s9 () Bool (= s2 s8))
[GOOD] (define-fun s10 () Int (- s8 s5))
[GOOD] (define-fun s11 () (Seq Int) (seq.extract s7 s5 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s13 () Bool (= s2 s12))
[GOOD] (define-fun s14 () Int (- s12 s5))
[GOOD] (define-fun s15 () (Seq Int) (seq.extract s11 s5 s14))
[GOOD] (define-fun s16 () Int (seq.len s15))
[GOOD] (define-fun s17 () Bool (= s2 s16))
[GOOD] (define-fun s18 () Int (- s16 s5))
[GOOD] (define-fun s19 () (Seq Int) (seq.extract s15 s5 s18))
[GOOD] (define-fun s20 () Int (seq.len s19))
[GOOD] (define-fun s21 () Bool (= s2 s20))
[GOOD] (define-fun s22 () Int (- s20 s5))
[GOOD] (define-fun s23 () (Seq Int) (seq.extract s19 s5 s22))
[GOOD] (define-fun s24 () Int (seq.len s23))
[GOOD] (define-fun s25 () Bool (= s2 s24))
[GOOD] (define-fun s26 () Int (- s24 s5))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s23 s5 s26))
[GOOD] (define-fun s28 () Int (seq.len s27))
[GOOD] (define-fun s29 () Bool (= s2 s28))
[GOOD] (define-fun s30 () Int (- s28 s5))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s27 s5 s30))
[GOOD] (define-fun s32 () Int (seq.len s31))
[GOOD] (define-fun s33 () Bool (= s2 s32))
[GOOD] (define-fun s34 () Int (- s32 s5))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s31 s5 s34))
[GOOD] (define-fun s36 () Int (seq.len s35))
[GOOD] (define-fun s37 () Bool (= s2 s36))
[GOOD] (define-fun s38 () Int (- s36 s5))
[GOOD] (define-fun s39 () (Seq Int) (seq.extract s35 s5 s38))
[GOOD] (define-fun s40 () Int (seq.len s39))
[GOOD] (define-fun s41 () Bool (= s2 s40))
[GOOD] (define-fun s42 () Int (seq.nth s39 s2))
[GOOD] (define-fun s43 () (Seq Int) (seq.unit s42))
[GOOD] (define-fun s44 () (Seq Int) (ite s41 s4 s43))
[GOOD] (define-fun s45 () Int (seq.nth s35 s2))
[GOOD] (define-fun s46 () (Seq Int) (seq.unit s45))
[GOOD] (define-fun s47 () (Seq Int) (seq.++ s44 s46))
[GOOD] (define-fun s48 () (Seq Int) (ite s37 s4 s47))
[GOOD] (define-fun s49 () Int (seq.nth s31 s2))
[GOOD] (define-fun s50 () (Seq Int) (seq.unit s49))
[GOOD] (define-fun s51 () (Seq Int) (seq.++ s48 s50))
[GOOD] (define-fun s52 () (Seq Int) (ite s33 s4 s51))
[GOOD] (define-fun s53 () Int (seq.nth s27 s2))
[GOOD] (define-fun s54 () (Seq Int) (seq.unit s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.++ s52 s54))
[GOOD] (define-fun s56 () (Seq Int) (ite s29 s4 s55))
[GOOD] (define-fun s57 () Int (seq.nth s23 s2))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () (Seq Int) (seq.++ s56 s58))
[GOOD] (define-fun s60 () (Seq Int) (ite s25 s4 s59))
[GOOD] (define-fun s61 () Int (seq.nth s19 s2))
[GOOD] (define-fun s62 () (Seq Int) (seq.unit s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.++ s60 s62))
[GOOD] (define-fun s64 () (Seq Int) (ite s21 s4 s63))
[GOOD] (define-fun s65 () Int (seq.nth s15 s2))
[GOOD] (define-fun s66 () (Seq Int) (seq.unit s65))
[GOOD] (define-fun s67 () (Seq Int) (seq.++ s64 s66))
[GOOD] (define-fun s68 () (Seq Int) (ite s17 s4 s67))
[GOOD] (define-fun s69 () Int (seq.nth s11 s2))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () (Seq Int) (seq.++ s68 s70))
[GOOD] (define-fun s72 () (Seq Int) (ite s13 s4 s71))
[GOOD] (define-fun s73 () Int (seq.nth s7 s2))
[GOOD] (define-fun s74 () (Seq Int) (seq.unit s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.++ s72 s74))
[GOOD] (define-fun s76 () (Seq Int) (ite s9 s4 s75))
[GOOD] (define-fun s77 () Int (seq.nth s0 s2))
[GOOD] (define-fun s78 () (Seq Int) (seq.unit s77))
[GOOD] (define-fun s79 () (Seq Int) (seq.++ s76 s78))
[GOOD] (define-fun s80 () (Seq Int) (ite s3 s4 s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.++ s74 s78))
[GOOD] (define-fun s82 () (Seq Int) (seq.++ s70 s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.++ s66 s82))
[GOOD] (define-fun s84 () (Seq Int) (seq.++ s62 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s58 s84))
[GOOD] (define-fun s86 () (Seq Int) (seq.++ s54 s85))
[GOOD] (define-fun s87 () (Seq Int) (seq.++ s50 s86))
[GOOD] (define-fun s88 () (Seq Int) (seq.++ s46 s87))
[GOOD] (define-fun s89 () (Seq Int) (seq.++ s43 s88))
[GOOD] (define-fun s90 () (Seq Int) (ite s41 s88 s89))
[GOOD] (define-fun s91 () (Seq Int) (ite s37 s87 s90))
[GOOD] (define-fun s92 () (Seq Int) (ite s33 s86 s91))
[GOOD] (define-fun s93 () (Seq Int) (ite s29 s85 s92))
[GOOD] (define-fun s94 () (Seq Int) (ite s25 s84 s93))
[GOOD] (define-fun s95 () (Seq Int) (ite s21 s83 s94))
[GOOD] (define-fun s96 () (Seq Int) (ite s17 s82 s95))
[GOOD] (define-fun s97 () (Seq Int) (ite s13 s81 s96))
[GOOD] (define-fun s98 () (Seq Int) (ite s9 s78 s97))
[GOOD] (define-fun s99 () (Seq Int) (ite s3 s4 s98))
[GOOD] (define-fun s100 () Bool (distinct s80 s99))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s100)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
