** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s12 () Int 0)
[GOOD] (define-fun s14 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] (define-fun s15 () Int 1)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (<= s0 s1))
[GOOD] (define-fun s4 () Bool (<= s1 s2))
[GOOD] (define-fun s5 () Bool (and s3 s4))
[GOOD] (define-fun s6 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s9 () (Seq Int) (seq.++ s7 s8))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s6 s9))
[GOOD] (define-fun s11 () Int (seq.len s10))
[GOOD] (define-fun s13 () Bool (= s11 s12))
[GOOD] (define-fun s16 () Int (- s11 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s10 s15 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s12 s18))
[GOOD] (define-fun s20 () Int (- s18 s15))
[GOOD] (define-fun s21 () (Seq Int) (seq.extract s17 s15 s20))
[GOOD] (define-fun s22 () Int (seq.len s21))
[GOOD] (define-fun s23 () Bool (= s12 s22))
[GOOD] (define-fun s24 () Int (seq.nth s21 s12))
[GOOD] (define-fun s25 () (Seq Int) (seq.unit s24))
[GOOD] (define-fun s26 () (Seq Int) (ite s23 s14 s25))
[GOOD] (define-fun s27 () Int (seq.len s26))
[GOOD] (define-fun s28 () Bool (= s12 s27))
[GOOD] (define-fun s29 () Int (seq.nth s17 s12))
[GOOD] (define-fun s30 () (Seq Int) (seq.unit s29))
[GOOD] (define-fun s31 () Int (seq.nth s26 s12))
[GOOD] (define-fun s32 () Bool (< s29 s31))
[GOOD] (define-fun s33 () (Seq Int) (seq.unit s31))
[GOOD] (define-fun s34 () Int (- s27 s15))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s26 s15 s34))
[GOOD] (define-fun s36 () (Seq Int) (seq.++ s33 s35))
[GOOD] (define-fun s37 () (Seq Int) (seq.++ s30 s36))
[GOOD] (define-fun s38 () Int (seq.len s35))
[GOOD] (define-fun s39 () Bool (= s12 s38))
[GOOD] (define-fun s40 () Int (seq.nth s35 s12))
[GOOD] (define-fun s41 () Bool (< s29 s40))
[GOOD] (define-fun s42 () (Seq Int) (seq.unit s40))
[GOOD] (define-fun s43 () Int (- s38 s15))
[GOOD] (define-fun s44 () (Seq Int) (seq.extract s35 s15 s43))
[GOOD] (define-fun s45 () (Seq Int) (seq.++ s42 s44))
[GOOD] (define-fun s46 () (Seq Int) (seq.++ s30 s45))
[GOOD] (define-fun s47 () Int (seq.len s44))
[GOOD] (define-fun s48 () Bool (= s12 s47))
[GOOD] (define-fun s49 () Int (seq.nth s44 s12))
[GOOD] (define-fun s50 () Bool (< s29 s49))
[GOOD] (define-fun s51 () (Seq Int) (seq.unit s49))
[GOOD] (define-fun s52 () Int (- s47 s15))
[GOOD] (define-fun s53 () (Seq Int) (seq.extract s44 s15 s52))
[GOOD] (define-fun s54 () (Seq Int) (seq.++ s51 s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.++ s30 s54))
[GOOD] (define-fun s56 () (Seq Int) (seq.++ s51 s30))
[GOOD] (define-fun s57 () (Seq Int) (ite s50 s55 s56))
[GOOD] (define-fun s58 () (Seq Int) (ite s48 s30 s57))
[GOOD] (define-fun s59 () (Seq Int) (seq.++ s42 s58))
[GOOD] (define-fun s60 () (Seq Int) (ite s41 s46 s59))
[GOOD] (define-fun s61 () (Seq Int) (ite s39 s30 s60))
[GOOD] (define-fun s62 () (Seq Int) (seq.++ s33 s61))
[GOOD] (define-fun s63 () (Seq Int) (ite s32 s37 s62))
[GOOD] (define-fun s64 () (Seq Int) (ite s28 s30 s63))
[GOOD] (define-fun s65 () (Seq Int) (ite s19 s14 s64))
[GOOD] (define-fun s66 () Int (seq.len s65))
[GOOD] (define-fun s67 () Bool (= s12 s66))
[GOOD] (define-fun s68 () Int (seq.nth s10 s12))
[GOOD] (define-fun s69 () (Seq Int) (seq.unit s68))
[GOOD] (define-fun s70 () Int (seq.nth s65 s12))
[GOOD] (define-fun s71 () Bool (< s68 s70))
[GOOD] (define-fun s72 () (Seq Int) (seq.unit s70))
[GOOD] (define-fun s73 () Int (- s66 s15))
[GOOD] (define-fun s74 () (Seq Int) (seq.extract s65 s15 s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.++ s72 s74))
[GOOD] (define-fun s76 () (Seq Int) (seq.++ s69 s75))
[GOOD] (define-fun s77 () Int (seq.len s74))
[GOOD] (define-fun s78 () Bool (= s12 s77))
[GOOD] (define-fun s79 () Int (seq.nth s74 s12))
[GOOD] (define-fun s80 () Bool (< s68 s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.unit s79))
[GOOD] (define-fun s82 () Int (- s77 s15))
[GOOD] (define-fun s83 () (Seq Int) (seq.extract s74 s15 s82))
[GOOD] (define-fun s84 () (Seq Int) (seq.++ s81 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s69 s84))
[GOOD] (define-fun s86 () Int (seq.len s83))
[GOOD] (define-fun s87 () Bool (= s12 s86))
[GOOD] (define-fun s88 () Int (seq.nth s83 s12))
[GOOD] (define-fun s89 () Bool (< s68 s88))
[GOOD] (define-fun s90 () (Seq Int) (seq.unit s88))
[GOOD] (define-fun s91 () Int (- s86 s15))
[GOOD] (define-fun s92 () (Seq Int) (seq.extract s83 s15 s91))
[GOOD] (define-fun s93 () (Seq Int) (seq.++ s90 s92))
[GOOD] (define-fun s94 () (Seq Int) (seq.++ s69 s93))
[GOOD] (define-fun s95 () (Seq Int) (seq.++ s90 s69))
[GOOD] (define-fun s96 () (Seq Int) (ite s89 s94 s95))
[GOOD] (define-fun s97 () (Seq Int) (ite s87 s69 s96))
[GOOD] (define-fun s98 () (Seq Int) (seq.++ s81 s97))
[GOOD] (define-fun s99 () (Seq Int) (ite s80 s85 s98))
[GOOD] (define-fun s100 () (Seq Int) (ite s78 s69 s99))
[GOOD] (define-fun s101 () (Seq Int) (seq.++ s72 s100))
[GOOD] (define-fun s102 () (Seq Int) (ite s71 s76 s101))
[GOOD] (define-fun s103 () (Seq Int) (ite s67 s69 s102))
[GOOD] (define-fun s104 () (Seq Int) (ite s13 s14 s103))
[GOOD] (define-fun s105 () Bool (= s10 s104))
[GOOD] (define-fun s106 () Bool (=> s5 s105))
[GOOD] (define-fun s107 () Bool (<= s0 s2))
[GOOD] (define-fun s108 () Bool (<= s2 s1))
[GOOD] (define-fun s109 () Bool (and s107 s108))
[GOOD] (define-fun s110 () (Seq Int) (seq.++ s8 s7))
[GOOD] (define-fun s111 () (Seq Int) (seq.++ s6 s110))
[GOOD] (define-fun s112 () Bool (= s104 s111))
[GOOD] (define-fun s113 () Bool (=> s109 s112))
[GOOD] (define-fun s114 () Bool (<= s1 s0))
[GOOD] (define-fun s115 () Bool (and s107 s114))
[GOOD] (define-fun s116 () (Seq Int) (seq.++ s6 s8))
[GOOD] (define-fun s117 () (Seq Int) (seq.++ s7 s116))
[GOOD] (define-fun s118 () Bool (= s104 s117))
[GOOD] (define-fun s119 () Bool (=> s115 s118))
[GOOD] (define-fun s120 () Bool (<= s2 s0))
[GOOD] (define-fun s121 () Bool (and s4 s120))
[GOOD] (define-fun s122 () (Seq Int) (seq.++ s8 s6))
[GOOD] (define-fun s123 () (Seq Int) (seq.++ s7 s122))
[GOOD] (define-fun s124 () Bool (= s104 s123))
[GOOD] (define-fun s125 () Bool (=> s121 s124))
[GOOD] (define-fun s126 () Bool (and s3 s120))
[GOOD] (define-fun s127 () (Seq Int) (seq.++ s6 s7))
[GOOD] (define-fun s128 () (Seq Int) (seq.++ s8 s127))
[GOOD] (define-fun s129 () Bool (= s104 s128))
[GOOD] (define-fun s130 () Bool (=> s126 s129))
[GOOD] (define-fun s131 () Bool (and s108 s114))
[GOOD] (define-fun s132 () (Seq Int) (seq.++ s7 s6))
[GOOD] (define-fun s133 () (Seq Int) (seq.++ s8 s132))
[GOOD] (define-fun s134 () Bool (= s104 s133))
[GOOD] (define-fun s135 () Bool (=> s131 s134))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s106)
[GOOD] (assert s113)
[GOOD] (assert s119)
[GOOD] (assert s125)
[GOOD] (assert s130)
[GOOD] (assert s135)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
