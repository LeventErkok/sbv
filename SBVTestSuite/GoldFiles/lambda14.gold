** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5)))
[GOOD] (define-fun s4 () (Seq Int) (seq.++ (seq.unit 10) (seq.unit 11) (seq.unit 12) (seq.unit 13) (seq.unit 14) (seq.unit 15)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.zipWith @(Integer,Integer,Integer)_d8dc9e6fbd| :: [SInteger] -> [SInteger] -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.zipWith @(Integer,Integer,Integer)_d8dc9e6fbd| ((l1_s0 (Seq Int)) (l1_s1 (Seq Int))) (Seq Int)
                                 (let ((l1_s3 0))
                                 (let ((l1_s8 (as seq.empty (Seq Int))))
                                 (let ((l1_s13 1))
                                 (let ((l1_s2 (seq.len l1_s0)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 (let ((l1_s5 (seq.len l1_s1)))
                                 (let ((l1_s6 (= l1_s3 l1_s5)))
                                 (let ((l1_s7 (or l1_s4 l1_s6)))
                                 (let ((l1_s9 (seq.nth l1_s0 l1_s3)))
                                 (let ((l1_s10 (seq.nth l1_s1 l1_s3)))
                                 (let ((l1_s11 (+ l1_s9 l1_s10)))
                                 (let ((l1_s12 (seq.unit l1_s11)))
                                 (let ((l1_s14 (- l1_s2 l1_s13)))
                                 (let ((l1_s15 (seq.extract l1_s0 l1_s13 l1_s14)))
                                 (let ((l1_s16 (- l1_s5 l1_s13)))
                                 (let ((l1_s17 (seq.extract l1_s1 l1_s13 l1_s16)))
                                 (let ((l1_s18 (|sbv.zipWith @(Integer,Integer,Integer)_d8dc9e6fbd| l1_s15 l1_s17)))
                                 (let ((l1_s19 (seq.++ l1_s12 l1_s18)))
                                 (let ((l1_s20 (ite l1_s7 l1_s8 l1_s19)))
                                 l1_s20))))))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s5 () (Seq Int) (|sbv.zipWith @(Integer,Integer,Integer)_d8dc9e6fbd| s4 s0))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 11) (seq.unit 13) (seq.unit 15) (seq.unit 17) (seq.unit 19))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 11) (seq.unit 13) (seq.unit 15) (seq.unit 17) (seq.unit 19))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =      [1,2,3,4,5] :: [Integer]
  s1 = [11,13,15,17,19] :: [Integer]
