** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8) (seq.unit 9) (seq.unit 10)))
[GOOD] (define-fun s5 () (Seq Int) (seq.++ (seq.unit 11) (seq.unit 12) (seq.unit 13) (seq.unit 14) (seq.unit 15) (seq.unit 16) (seq.unit 17) (seq.unit 18) (seq.unit 19) (seq.unit 20)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] (declare-fun s2 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.zipWith @SBV (Integer,Integer) -> SBV Integer_1fd06f7602 @SBV ([Integer],[Integer]) -> SBV [Integer]| :: ([SInteger], [SInteger]) -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.zipWith @SBV (Integer,Integer) -> SBV Integer_1fd06f7602 @SBV ([Integer],[Integer]) -> SBV [Integer]| ((l1_s0 (SBVTuple2 (Seq Int) (Seq Int)))) (Seq Int)
                                 (let ((l1_s3 0))
                                 (let ((l1_s9 (as seq.empty (Seq Int))))
                                 (let ((l1_s14 1))
                                 (let ((l1_s1 (proj_1_SBVTuple2 l1_s0)))
                                 (let ((l1_s2 (seq.len l1_s1)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 (let ((l1_s5 (proj_2_SBVTuple2 l1_s0)))
                                 (let ((l1_s6 (seq.len l1_s5)))
                                 (let ((l1_s7 (= l1_s3 l1_s6)))
                                 (let ((l1_s8 (or l1_s4 l1_s7)))
                                 (let ((l1_s10 (seq.nth l1_s1 l1_s3)))
                                 (let ((l1_s11 (seq.nth l1_s5 l1_s3)))
                                 (let ((l1_s12 (+ l1_s10 l1_s11)))
                                 (let ((l1_s13 (seq.unit l1_s12)))
                                 (let ((l1_s15 (- l1_s2 l1_s14)))
                                 (let ((l1_s16 (seq.extract l1_s1 l1_s14 l1_s15)))
                                 (let ((l1_s17 (- l1_s6 l1_s14)))
                                 (let ((l1_s18 (seq.extract l1_s5 l1_s14 l1_s17)))
                                 (let ((l1_s19 ((as mkSBVTuple2 (SBVTuple2 (Seq Int) (Seq Int))) l1_s16 l1_s18)))
                                 (let ((l1_s20 (|sbv.zipWith @SBV (Integer,Integer) -> SBV Integer_1fd06f7602 @SBV ([Integer],[Integer]) -> SBV [Integer]| l1_s19)))
                                 (let ((l1_s21 (seq.++ l1_s13 l1_s20)))
                                 (let ((l1_s22 (ite l1_s8 l1_s9 l1_s21)))
                                 l1_s22)))))))))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s7 () (SBVTuple2 (Seq Int) (Seq Int)) ((as mkSBVTuple2 (SBVTuple2 (Seq Int) (Seq Int))) s0 s1))
[GOOD] (define-fun s8 () (Seq Int) (|sbv.zipWith @SBV (Integer,Integer) -> SBV Integer_1fd06f7602 @SBV ([Integer],[Integer]) -> SBV [Integer]| s7))
[GOOD] (define-fun s9 () Bool (= s2 s8))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s6)
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s2))
[RECV] ((s2 (seq.++ (seq.unit 12)
               (seq.unit 14)
               (seq.unit 16)
               (seq.unit 18)
               (seq.unit 20)
               (seq.unit 22)
               (seq.unit 24)
               (seq.unit 26)
               (seq.unit 28)
               (seq.unit 30))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1)
               (seq.unit 2)
               (seq.unit 3)
               (seq.unit 4)
               (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 11)
               (seq.unit 12)
               (seq.unit 13)
               (seq.unit 14)
               (seq.unit 15)
               (seq.unit 16)
               (seq.unit 17)
               (seq.unit 18)
               (seq.unit 19)
               (seq.unit 20))))
[SEND] (get-value (s2))
[RECV] ((s2 (seq.++ (seq.unit 12)
               (seq.unit 14)
               (seq.unit 16)
               (seq.unit 18)
               (seq.unit 20)
               (seq.unit 22)
               (seq.unit 24)
               (seq.unit 26)
               (seq.unit 28)
               (seq.unit 30))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =          [1,2,3,4,5,6,7,8,9,10] :: [Integer]
  s1 = [11,12,13,14,15,16,17,18,19,20] :: [Integer]
  s2 = [12,14,16,18,20,22,24,26,28,30] :: [Integer]
