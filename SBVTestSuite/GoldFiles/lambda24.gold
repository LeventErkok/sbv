** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has lambda expressions, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8) (seq.unit 9) (seq.unit 10)))
[GOOD] (define-fun s5 () (Seq Int) (seq.++ (seq.unit 11) (seq.unit 12) (seq.unit 13) (seq.unit 14) (seq.unit 15) (seq.unit 16) (seq.unit 17) (seq.unit 18) (seq.unit 19) (seq.unit 20)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] (declare-fun s2 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- SBV Function definitions
[GOOD] (define-fun-rec |sbv.zipWith_@((SInteger,_SInteger,_SInteger))_(lambda_((l1_s0_Int)_(l1_s1_Int))_(+_l1_s0_l1_s1))| ((lst1 (Seq Int)) (lst2 (Seq Int))) (Seq Int)
                      (ite (or (= lst1 (as seq.empty (Seq Int))) (= lst2 (as seq.empty (Seq Int))))
                           (as seq.empty (Seq Int))
                           (seq.++ (seq.unit (select (lambda ((l1_s0 Int) (l1_s1 Int))
         (+ l1_s0 l1_s1)) (seq.nth lst1 0) (seq.nth lst2 0))) (|sbv.zipWith_@((SInteger,_SInteger,_SInteger))_(lambda_((l1_s0_Int)_(l1_s1_Int))_(+_l1_s0_l1_s1))| (seq.extract lst1 1 (- (seq.len lst1) 1)) (seq.extract lst2 1 (- (seq.len lst2) 1))))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s7 () (Seq Int) (|sbv.zipWith_@((SInteger,_SInteger,_SInteger))_(lambda_((l1_s0_Int)_(l1_s1_Int))_(+_l1_s0_l1_s1))| s0 s1))
[GOOD] (define-fun s8 () Bool (= s2 s7))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s6)
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s2))
[RECV] ((s2 (seq.++ (seq.unit 12)
               (seq.unit 14)
               (seq.unit 16)
               (seq.unit 18)
               (seq.unit 20)
               (seq.unit 22)
               (seq.unit 24)
               (seq.unit 26)
               (seq.unit 28)
               (seq.unit 30))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1)
               (seq.unit 2)
               (seq.unit 3)
               (seq.unit 4)
               (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 11)
               (seq.unit 12)
               (seq.unit 13)
               (seq.unit 14)
               (seq.unit 15)
               (seq.unit 16)
               (seq.unit 17)
               (seq.unit 18)
               (seq.unit 19)
               (seq.unit 20))))
[SEND] (get-value (s2))
[RECV] ((s2 (seq.++ (seq.unit 12)
               (seq.unit 14)
               (seq.unit 16)
               (seq.unit 18)
               (seq.unit 20)
               (seq.unit 22)
               (seq.unit 24)
               (seq.unit 26)
               (seq.unit 28)
               (seq.unit 30))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =          [1,2,3,4,5,6,7,8,9,10] :: [Integer]
  s1 = [11,12,13,14,15,16,17,18,19,20] :: [Integer]
  s2 = [12,14,16,18,20,22,24,26,28,30] :: [Integer]
