** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s5 () Int 6)
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s20 () Int 1)
[GOOD] (define-fun s59 () Int 10)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Int (+ s0 s1))
[GOOD] (define-fun s4 () Int (+ s2 s3))
[GOOD] (define-fun s6 () Bool (= s4 s5))
[GOOD] (define-fun s8 () Bool (> s0 s7))
[GOOD] (define-fun s9 () Bool (> s1 s7))
[GOOD] (define-fun s10 () Bool (> s2 s7))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (and s8 s11))
[GOOD] (define-fun s13 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s14 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s16 () (Seq Int) (seq.++ s14 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.++ s13 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s7 s18))
[GOOD] (define-fun s21 () Int (- s18 s20))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s17 s20 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s7 s23))
[GOOD] (define-fun s25 () Int (- s23 s20))
[GOOD] (define-fun s26 () (Seq Int) (seq.extract s22 s20 s25))
[GOOD] (define-fun s27 () Int (seq.len s26))
[GOOD] (define-fun s28 () Bool (= s7 s27))
[GOOD] (define-fun s29 () Int (- s27 s20))
[GOOD] (define-fun s30 () (Seq Int) (seq.extract s26 s20 s29))
[GOOD] (define-fun s31 () Int (seq.len s30))
[GOOD] (define-fun s32 () Bool (= s7 s31))
[GOOD] (define-fun s33 () Int (- s31 s20))
[GOOD] (define-fun s34 () (Seq Int) (seq.extract s30 s20 s33))
[GOOD] (define-fun s35 () Int (seq.len s34))
[GOOD] (define-fun s36 () Bool (= s7 s35))
[GOOD] (define-fun s37 () Int (- s35 s20))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s34 s20 s37))
[GOOD] (define-fun s39 () Int (seq.len s38))
[GOOD] (define-fun s40 () Bool (= s7 s39))
[GOOD] (define-fun s41 () Int (- s39 s20))
[GOOD] (define-fun s42 () (Seq Int) (seq.extract s38 s20 s41))
[GOOD] (define-fun s43 () Int (seq.len s42))
[GOOD] (define-fun s44 () Bool (= s7 s43))
[GOOD] (define-fun s45 () Int (- s43 s20))
[GOOD] (define-fun s46 () (Seq Int) (seq.extract s42 s20 s45))
[GOOD] (define-fun s47 () Int (seq.len s46))
[GOOD] (define-fun s48 () Bool (= s7 s47))
[GOOD] (define-fun s49 () Int (- s47 s20))
[GOOD] (define-fun s50 () (Seq Int) (seq.extract s46 s20 s49))
[GOOD] (define-fun s51 () Int (seq.len s50))
[GOOD] (define-fun s52 () Bool (= s7 s51))
[GOOD] (define-fun s53 () Int (- s51 s20))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s50 s20 s53))
[GOOD] (define-fun s55 () Int (seq.len s54))
[GOOD] (define-fun s56 () Bool (= s7 s55))
[GOOD] (define-fun s57 () Int (seq.nth s54 s7))
[GOOD] (define-fun s58 () Bool (< s57 s7))
[GOOD] (define-fun s60 () Bool (> s57 s59))
[GOOD] (define-fun s61 () Bool (or s58 s60))
[GOOD] (define-fun s62 () Bool (not s56))
[GOOD] (define-fun s63 () Bool (and s61 s62))
[GOOD] (define-fun s64 () Int (seq.nth s50 s7))
[GOOD] (define-fun s65 () Bool (< s64 s7))
[GOOD] (define-fun s66 () Bool (> s64 s59))
[GOOD] (define-fun s67 () Bool (or s65 s66))
[GOOD] (define-fun s68 () Bool (or s63 s67))
[GOOD] (define-fun s69 () Bool (not s52))
[GOOD] (define-fun s70 () Bool (and s68 s69))
[GOOD] (define-fun s71 () Int (seq.nth s46 s7))
[GOOD] (define-fun s72 () Bool (< s71 s7))
[GOOD] (define-fun s73 () Bool (> s71 s59))
[GOOD] (define-fun s74 () Bool (or s72 s73))
[GOOD] (define-fun s75 () Bool (or s70 s74))
[GOOD] (define-fun s76 () Bool (not s48))
[GOOD] (define-fun s77 () Bool (and s75 s76))
[GOOD] (define-fun s78 () Int (seq.nth s42 s7))
[GOOD] (define-fun s79 () Bool (< s78 s7))
[GOOD] (define-fun s80 () Bool (> s78 s59))
[GOOD] (define-fun s81 () Bool (or s79 s80))
[GOOD] (define-fun s82 () Bool (or s77 s81))
[GOOD] (define-fun s83 () Bool (not s44))
[GOOD] (define-fun s84 () Bool (and s82 s83))
[GOOD] (define-fun s85 () Int (seq.nth s38 s7))
[GOOD] (define-fun s86 () Bool (< s85 s7))
[GOOD] (define-fun s87 () Bool (> s85 s59))
[GOOD] (define-fun s88 () Bool (or s86 s87))
[GOOD] (define-fun s89 () Bool (or s84 s88))
[GOOD] (define-fun s90 () Bool (not s40))
[GOOD] (define-fun s91 () Bool (and s89 s90))
[GOOD] (define-fun s92 () Int (seq.nth s34 s7))
[GOOD] (define-fun s93 () Bool (< s92 s7))
[GOOD] (define-fun s94 () Bool (> s92 s59))
[GOOD] (define-fun s95 () Bool (or s93 s94))
[GOOD] (define-fun s96 () Bool (or s91 s95))
[GOOD] (define-fun s97 () Bool (not s36))
[GOOD] (define-fun s98 () Bool (and s96 s97))
[GOOD] (define-fun s99 () Int (seq.nth s30 s7))
[GOOD] (define-fun s100 () Bool (< s99 s7))
[GOOD] (define-fun s101 () Bool (> s99 s59))
[GOOD] (define-fun s102 () Bool (or s100 s101))
[GOOD] (define-fun s103 () Bool (or s98 s102))
[GOOD] (define-fun s104 () Bool (not s32))
[GOOD] (define-fun s105 () Bool (and s103 s104))
[GOOD] (define-fun s106 () Int (seq.nth s26 s7))
[GOOD] (define-fun s107 () Bool (< s106 s7))
[GOOD] (define-fun s108 () Bool (> s106 s59))
[GOOD] (define-fun s109 () Bool (or s107 s108))
[GOOD] (define-fun s110 () Bool (or s105 s109))
[GOOD] (define-fun s111 () Bool (not s28))
[GOOD] (define-fun s112 () Bool (and s110 s111))
[GOOD] (define-fun s113 () Int (seq.nth s22 s7))
[GOOD] (define-fun s114 () Bool (< s113 s7))
[GOOD] (define-fun s115 () Bool (> s113 s59))
[GOOD] (define-fun s116 () Bool (or s114 s115))
[GOOD] (define-fun s117 () Bool (or s112 s116))
[GOOD] (define-fun s118 () Bool (not s24))
[GOOD] (define-fun s119 () Bool (and s117 s118))
[GOOD] (define-fun s120 () Int (seq.nth s17 s7))
[GOOD] (define-fun s121 () Bool (< s120 s7))
[GOOD] (define-fun s122 () Bool (> s120 s59))
[GOOD] (define-fun s123 () Bool (or s121 s122))
[GOOD] (define-fun s124 () Bool (or s119 s123))
[GOOD] (define-fun s125 () Bool (not s19))
[GOOD] (define-fun s126 () Bool (and s124 s125))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s6)
[GOOD] (assert s12)
[GOOD] (assert s126)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
