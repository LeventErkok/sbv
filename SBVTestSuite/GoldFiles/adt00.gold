** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] (declare-datatypes ((SBVTuple3 3)) ((par (T1 T2 T3)
                                           ((mkSBVTuple3 (proj_1_SBVTuple3 T1)
                                                         (proj_2_SBVTuple3 T2)
                                                         (proj_3_SBVTuple3 T3))))))
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVEither 2)) ((par (T1 T2)
                                           ((left_SBVEither  (get_left_SBVEither  T1))
                                            (right_SBVEither (get_right_SBVEither T2))))))
[GOOD] (declare-datatypes ((SBVMaybe 1)) ((par (T)
                                           ((nothing_SBVMaybe)
                                            (just_SBVMaybe (get_just_SBVMaybe T))))))
[GOOD] (declare-datatype SBVRational ((SBV.Rational (sbv.rat.numerator Int) (sbv.rat.denominator Int))))

[GOOD] (define-fun sbv.rat.eq ((x SBVRational) (y SBVRational)) Bool
          (= (* (sbv.rat.numerator   x) (sbv.rat.denominator y))
             (* (sbv.rat.denominator x) (sbv.rat.numerator   y)))
       )

[GOOD] (define-fun sbv.rat.notEq ((x SBVRational) (y SBVRational)) Bool
          (not (sbv.rat.eq x y))
       )
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: ADT
[GOOD] (declare-datatype ADT (
           (AEmpty)
           (ABool (ADT_ABool_1 Bool))
           (AInteger (ADT_AInteger_1 Int))
           (AWord8 (ADT_AWord8_1 (_ BitVec 8)))
           (AWord16 (ADT_AWord16_1 (_ BitVec 16)))
           (AWord32 (ADT_AWord32_1 (_ BitVec 32)))
           (AWord64 (ADT_AWord64_1 (_ BitVec 64)))
           (AInt8 (ADT_AInt8_1 (_ BitVec 8)))
           (AInt16 (ADT_AInt16_1 (_ BitVec 16)))
           (AInt32 (ADT_AInt32_1 (_ BitVec 32)))
           (AInt64 (ADT_AInt64_1 (_ BitVec 64)))
           (AWord1 (ADT_AWord1_1 (_ BitVec 1)))
           (AWord5 (ADT_AWord5_1 (_ BitVec 5)))
           (AWord30 (ADT_AWord30_1 (_ BitVec 30)))
           (AInt1 (ADT_AInt1_1 (_ BitVec 1)))
           (AInt5 (ADT_AInt5_1 (_ BitVec 5)))
           (AInt30 (ADT_AInt30_1 (_ BitVec 30)))
           (AReal (ADT_AReal_1 Real))
           (AFloat (ADT_AFloat_1 (_ FloatingPoint  8 24)))
           (ADouble (ADT_ADouble_1 (_ FloatingPoint 11 53)))
           (AFP (ADT_AFP_1 (_ FloatingPoint 5 12)))
           (AString (ADT_AString_1 String))
           (AList (ADT_AList_1 (Seq Int)))
           (ATuple (ADT_ATuple_1 (SBVTuple2 (_ FloatingPoint 11 53) (Seq (SBVTuple2 (_ BitVec 5) (Seq (_ FloatingPoint  8 24)))))))
           (AMaybe (ADT_AMaybe_1 (SBVMaybe (SBVTuple3 Real (_ FloatingPoint  8 24) (SBVTuple2 SBVRational (Seq Bool))))))
           (AEither (ADT_AEither_1 (SBVEither (SBVTuple2 (SBVMaybe Int) Bool) (Seq SBVRational))))
           (APair (ADT_APair_1 ADT) (ADT_APair_2 ADT))
       ))
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () ADT) ; tracks user variable "e"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Bool (= s0 s0))
[GOOD] (define-fun s2 () Bool (not s1))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s2)
[SEND] (check-sat)
[RECV] unsat

UNSAT*** Solver   : Z3
*** Exit code: ExitSuccess
