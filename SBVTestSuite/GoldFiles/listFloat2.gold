** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (_ FloatingPoint  8 24)) ; tracks user variable "x"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |listEq @(SBV [Float] -> SBV [Float] -> SBV Bool)| :: [SFloat] -> [SFloat] -> SBool [Recursive]
[GOOD] (define-fun-rec |listEq @(SBV [Float] -> SBV [Float] -> SBV Bool)| ((l1_s0 (Seq (_ FloatingPoint  8 24))) (l1_s1 (Seq (_ FloatingPoint  8 24)))) Bool
                                 (let ((l1_s3 0))
                                 (let ((l1_s10 1))
                                 (let ((l1_s2 (seq.len l1_s0)))
                                 (let ((l1_s4 (= l1_s2 l1_s3)))
                                 (let ((l1_s5 (seq.len l1_s1)))
                                 (let ((l1_s6 (= l1_s3 l1_s5)))
                                 (let ((l1_s7 (seq.nth l1_s0 l1_s3)))
                                 (let ((l1_s8 (seq.nth l1_s1 l1_s3)))
                                 (let ((l1_s9 (fp.eq l1_s7 l1_s8)))
                                 (let ((l1_s11 (- l1_s2 l1_s10)))
                                 (let ((l1_s12 (seq.extract l1_s0 l1_s10 l1_s11)))
                                 (let ((l1_s13 (- l1_s5 l1_s10)))
                                 (let ((l1_s14 (seq.extract l1_s1 l1_s10 l1_s13)))
                                 (let ((l1_s15 (|listEq @(SBV [Float] -> SBV [Float] -> SBV Bool)| l1_s12 l1_s14)))
                                 (let ((l1_s16 (and l1_s9 l1_s15)))
                                 (let ((l1_s17 (ite l1_s4 l1_s6 l1_s16)))
                                 l1_s17)))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () (Seq (_ FloatingPoint  8 24)) (seq.unit s0))
[GOOD] (define-fun s2 () Bool (|listEq @(SBV [Float] -> SBV [Float] -> SBV Bool)| s1 s1))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert (not s2))
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (_ NaN 8 24)))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
Falsifiable. Counter-example:
  x = NaN :: Float
