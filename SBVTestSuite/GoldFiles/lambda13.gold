** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq (SBVTuple2 Int Int)) (seq.++ (seq.unit (mkSBVTuple2 1 4)) (seq.unit (mkSBVTuple2 1 5)) (seq.unit (mkSBVTuple2 1 6)) (seq.unit (mkSBVTuple2 2 4)) (seq.unit (mkSBVTuple2 2 5)) (seq.unit (mkSBVTuple2 2 6)) (seq.unit (mkSBVTuple2 3 4)) (seq.unit (mkSBVTuple2 3 5)) (seq.unit (mkSBVTuple2 3 6))))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 Int Int)))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.map @(SBV (Integer,Integer) -> SBV Integer)_1fd06f7602 @(SBV [(Integer,Integer)] -> SBV [Integer])| :: [(SInteger, SInteger)] -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.map @(SBV (Integer,Integer) -> SBV Integer)_1fd06f7602 @(SBV [(Integer,Integer)] -> SBV [Integer])| ((l1_s0 (Seq (SBVTuple2 Int Int)))) (Seq Int)
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 (as seq.empty (Seq Int))))
                                 (let ((l1_s10 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (seq.nth l1_s0 l1_s2)))
                                 (let ((l1_s6 (proj_1_SBVTuple2 l1_s5)))
                                 (let ((l1_s7 (proj_2_SBVTuple2 l1_s5)))
                                 (let ((l1_s8 (+ l1_s6 l1_s7)))
                                 (let ((l1_s9 (seq.unit l1_s8)))
                                 (let ((l1_s11 (- l1_s1 l1_s10)))
                                 (let ((l1_s12 (seq.extract l1_s0 l1_s10 l1_s11)))
                                 (let ((l1_s13 (|sbv.map @(SBV (Integer,Integer) -> SBV Integer)_1fd06f7602 @(SBV [(Integer,Integer)] -> SBV [Integer])| l1_s12)))
                                 (let ((l1_s14 (seq.++ l1_s9 l1_s13)))
                                 (let ((l1_s15 (ite l1_s3 l1_s4 l1_s14)))
                                 l1_s15))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () (Seq Int) (|sbv.map @(SBV (Integer,Integer) -> SBV Integer)_1fd06f7602 @(SBV [(Integer,Integer)] -> SBV [Integer])| s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 1 4))
               (seq.unit (mkSBVTuple2 1 5))
               (seq.unit (mkSBVTuple2 1 6))
               (seq.unit (mkSBVTuple2 2 4))
               (seq.unit (mkSBVTuple2 2 5))
               (seq.unit (mkSBVTuple2 2 6))
               (seq.unit (mkSBVTuple2 3 4))
               (seq.unit (mkSBVTuple2 3 5))
               (seq.unit (mkSBVTuple2 3 6)))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 5)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 6)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 7)
               (seq.unit 8)
               (seq.unit 9))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)] :: [(Integer, Integer)]
  s1 =                                     [5,6,7,6,7,8,7,8,9] :: [Integer]
