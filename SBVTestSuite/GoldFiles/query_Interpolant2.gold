** Calling: mathsat -input=smt2 -theory.fp.minmax_zero_mode=4
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-interpolants true)
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s3 () Int) ; tracks user variable "d"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun f (Int) Int)
[GOOD] (declare-fun g (Int) Int)
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Int (f s0))
[GOOD] (define-fun s5 () Bool (= s2 s4))
[GOOD] (define-fun s6 () Int (f s1))
[GOOD] (define-fun s7 () Bool (= s3 s6))
[GOOD] (define-fun s8 () Bool (and s5 s7))
[GOOD] (define-fun s9 () Bool (= s0 s1))
[GOOD] (define-fun s10 () Int (g s2))
[GOOD] (define-fun s11 () Int (g s3))
[GOOD] (define-fun s12 () Bool (distinct s10 s11))
[GOOD] (define-fun s13 () Bool (and s9 s12))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert (! s8 :interpolation-group |c1|))
[GOOD] (assert (! s13 :interpolation-group |c2|))
[SEND] (check-sat)
[RECV] unsat
[SEND] (get-interpolant (|c1|))
[RECV] (not (and (= s0 s1) (not (= s2 s3))))
*** Solver   : MathSAT
*** Exit code: ExitSuccess

FINAL OUTPUT:
"(not (and (= s0 s1) (not (= s2 s3))))"
