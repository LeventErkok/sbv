** Calling: cvc5 --lang smt --incremental --nl-cov
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_UFBV)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (_ BitVec 8) #x40)
[GOOD] (define-fun s5 () (_ BitVec 1) #b0)
[GOOD] (define-fun s91 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (_ BitVec 64))
[GOOD] (declare-fun s1 () (_ BitVec 8))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] (declare-fun table0 ((_ BitVec 8)) (_ BitVec 64))
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () (_ BitVec 8) (bvurem s1 s2))
[GOOD] (define-fun s4 () (_ BitVec 1) ((_ extract 5 5) s3))
[GOOD] (define-fun s6 () Bool (distinct s4 s5))
[GOOD] (define-fun s7 () (_ BitVec 1) ((_ extract 4 4) s3))
[GOOD] (define-fun s8 () Bool (distinct s5 s7))
[GOOD] (define-fun s9 () (_ BitVec 1) ((_ extract 3 3) s3))
[GOOD] (define-fun s10 () Bool (distinct s5 s9))
[GOOD] (define-fun s11 () (_ BitVec 1) ((_ extract 2 2) s3))
[GOOD] (define-fun s12 () Bool (distinct s5 s11))
[GOOD] (define-fun s13 () (_ BitVec 1) ((_ extract 1 1) s3))
[GOOD] (define-fun s14 () Bool (distinct s5 s13))
[GOOD] (define-fun s15 () (_ BitVec 1) ((_ extract 0 0) s3))
[GOOD] (define-fun s16 () Bool (distinct s5 s15))
[GOOD] (define-fun s17 () (_ BitVec 64) ((_ rotate_right 1) s0))
[GOOD] (define-fun s18 () (_ BitVec 64) (ite s16 s17 s0))
[GOOD] (define-fun s19 () (_ BitVec 64) ((_ rotate_right 2) s18))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite s14 s19 s18))
[GOOD] (define-fun s21 () (_ BitVec 64) ((_ rotate_right 4) s20))
[GOOD] (define-fun s22 () (_ BitVec 64) (ite s12 s21 s20))
[GOOD] (define-fun s23 () (_ BitVec 64) ((_ rotate_right 8) s22))
[GOOD] (define-fun s24 () (_ BitVec 64) (ite s10 s23 s22))
[GOOD] (define-fun s25 () (_ BitVec 64) ((_ rotate_right 16) s24))
[GOOD] (define-fun s26 () (_ BitVec 64) (ite s8 s25 s24))
[GOOD] (define-fun s27 () (_ BitVec 64) ((_ rotate_right 32) s26))
[GOOD] (define-fun s28 () (_ BitVec 64) (ite s6 s27 s26))
[GOOD] (define-fun s29 () (_ BitVec 64) ((_ rotate_right 2) s0))
[GOOD] (define-fun s30 () (_ BitVec 64) ((_ rotate_right 3) s0))
[GOOD] (define-fun s31 () (_ BitVec 64) ((_ rotate_right 4) s0))
[GOOD] (define-fun s32 () (_ BitVec 64) ((_ rotate_right 5) s0))
[GOOD] (define-fun s33 () (_ BitVec 64) ((_ rotate_right 6) s0))
[GOOD] (define-fun s34 () (_ BitVec 64) ((_ rotate_right 7) s0))
[GOOD] (define-fun s35 () (_ BitVec 64) ((_ rotate_right 8) s0))
[GOOD] (define-fun s36 () (_ BitVec 64) ((_ rotate_right 9) s0))
[GOOD] (define-fun s37 () (_ BitVec 64) ((_ rotate_right 10) s0))
[GOOD] (define-fun s38 () (_ BitVec 64) ((_ rotate_right 11) s0))
[GOOD] (define-fun s39 () (_ BitVec 64) ((_ rotate_right 12) s0))
[GOOD] (define-fun s40 () (_ BitVec 64) ((_ rotate_right 13) s0))
[GOOD] (define-fun s41 () (_ BitVec 64) ((_ rotate_right 14) s0))
[GOOD] (define-fun s42 () (_ BitVec 64) ((_ rotate_right 15) s0))
[GOOD] (define-fun s43 () (_ BitVec 64) ((_ rotate_right 16) s0))
[GOOD] (define-fun s44 () (_ BitVec 64) ((_ rotate_right 17) s0))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ rotate_right 18) s0))
[GOOD] (define-fun s46 () (_ BitVec 64) ((_ rotate_right 19) s0))
[GOOD] (define-fun s47 () (_ BitVec 64) ((_ rotate_right 20) s0))
[GOOD] (define-fun s48 () (_ BitVec 64) ((_ rotate_right 21) s0))
[GOOD] (define-fun s49 () (_ BitVec 64) ((_ rotate_right 22) s0))
[GOOD] (define-fun s50 () (_ BitVec 64) ((_ rotate_right 23) s0))
[GOOD] (define-fun s51 () (_ BitVec 64) ((_ rotate_right 24) s0))
[GOOD] (define-fun s52 () (_ BitVec 64) ((_ rotate_right 25) s0))
[GOOD] (define-fun s53 () (_ BitVec 64) ((_ rotate_right 26) s0))
[GOOD] (define-fun s54 () (_ BitVec 64) ((_ rotate_right 27) s0))
[GOOD] (define-fun s55 () (_ BitVec 64) ((_ rotate_right 28) s0))
[GOOD] (define-fun s56 () (_ BitVec 64) ((_ rotate_right 29) s0))
[GOOD] (define-fun s57 () (_ BitVec 64) ((_ rotate_right 30) s0))
[GOOD] (define-fun s58 () (_ BitVec 64) ((_ rotate_right 31) s0))
[GOOD] (define-fun s59 () (_ BitVec 64) ((_ rotate_right 32) s0))
[GOOD] (define-fun s60 () (_ BitVec 64) ((_ rotate_right 33) s0))
[GOOD] (define-fun s61 () (_ BitVec 64) ((_ rotate_right 34) s0))
[GOOD] (define-fun s62 () (_ BitVec 64) ((_ rotate_right 35) s0))
[GOOD] (define-fun s63 () (_ BitVec 64) ((_ rotate_right 36) s0))
[GOOD] (define-fun s64 () (_ BitVec 64) ((_ rotate_right 37) s0))
[GOOD] (define-fun s65 () (_ BitVec 64) ((_ rotate_right 38) s0))
[GOOD] (define-fun s66 () (_ BitVec 64) ((_ rotate_right 39) s0))
[GOOD] (define-fun s67 () (_ BitVec 64) ((_ rotate_right 40) s0))
[GOOD] (define-fun s68 () (_ BitVec 64) ((_ rotate_right 41) s0))
[GOOD] (define-fun s69 () (_ BitVec 64) ((_ rotate_right 42) s0))
[GOOD] (define-fun s70 () (_ BitVec 64) ((_ rotate_right 43) s0))
[GOOD] (define-fun s71 () (_ BitVec 64) ((_ rotate_right 44) s0))
[GOOD] (define-fun s72 () (_ BitVec 64) ((_ rotate_right 45) s0))
[GOOD] (define-fun s73 () (_ BitVec 64) ((_ rotate_right 46) s0))
[GOOD] (define-fun s74 () (_ BitVec 64) ((_ rotate_right 47) s0))
[GOOD] (define-fun s75 () (_ BitVec 64) ((_ rotate_right 48) s0))
[GOOD] (define-fun s76 () (_ BitVec 64) ((_ rotate_right 49) s0))
[GOOD] (define-fun s77 () (_ BitVec 64) ((_ rotate_right 50) s0))
[GOOD] (define-fun s78 () (_ BitVec 64) ((_ rotate_right 51) s0))
[GOOD] (define-fun s79 () (_ BitVec 64) ((_ rotate_right 52) s0))
[GOOD] (define-fun s80 () (_ BitVec 64) ((_ rotate_right 53) s0))
[GOOD] (define-fun s81 () (_ BitVec 64) ((_ rotate_right 54) s0))
[GOOD] (define-fun s82 () (_ BitVec 64) ((_ rotate_right 55) s0))
[GOOD] (define-fun s83 () (_ BitVec 64) ((_ rotate_right 56) s0))
[GOOD] (define-fun s84 () (_ BitVec 64) ((_ rotate_right 57) s0))
[GOOD] (define-fun s85 () (_ BitVec 64) ((_ rotate_right 58) s0))
[GOOD] (define-fun s86 () (_ BitVec 64) ((_ rotate_right 59) s0))
[GOOD] (define-fun s87 () (_ BitVec 64) ((_ rotate_right 60) s0))
[GOOD] (define-fun s88 () (_ BitVec 64) ((_ rotate_right 61) s0))
[GOOD] (define-fun s89 () (_ BitVec 64) ((_ rotate_right 62) s0))
[GOOD] (define-fun s90 () (_ BitVec 64) ((_ rotate_right 63) s0))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite (bvule #x40 s3) s91 (table0 s3)))
[GOOD] (define-fun s93 () Bool (= s28 s92))
[GOOD] ; --- delayedEqualities ---
[GOOD] (assert (= (table0 #x00) s0))
[GOOD] (assert (= (table0 #x01) s17))
[GOOD] (assert (= (table0 #x02) s29))
[GOOD] (assert (= (table0 #x03) s30))
[GOOD] (assert (= (table0 #x04) s31))
[GOOD] (assert (= (table0 #x05) s32))
[GOOD] (assert (= (table0 #x06) s33))
[GOOD] (assert (= (table0 #x07) s34))
[GOOD] (assert (= (table0 #x08) s35))
[GOOD] (assert (= (table0 #x09) s36))
[GOOD] (assert (= (table0 #x0a) s37))
[GOOD] (assert (= (table0 #x0b) s38))
[GOOD] (assert (= (table0 #x0c) s39))
[GOOD] (assert (= (table0 #x0d) s40))
[GOOD] (assert (= (table0 #x0e) s41))
[GOOD] (assert (= (table0 #x0f) s42))
[GOOD] (assert (= (table0 #x10) s43))
[GOOD] (assert (= (table0 #x11) s44))
[GOOD] (assert (= (table0 #x12) s45))
[GOOD] (assert (= (table0 #x13) s46))
[GOOD] (assert (= (table0 #x14) s47))
[GOOD] (assert (= (table0 #x15) s48))
[GOOD] (assert (= (table0 #x16) s49))
[GOOD] (assert (= (table0 #x17) s50))
[GOOD] (assert (= (table0 #x18) s51))
[GOOD] (assert (= (table0 #x19) s52))
[GOOD] (assert (= (table0 #x1a) s53))
[GOOD] (assert (= (table0 #x1b) s54))
[GOOD] (assert (= (table0 #x1c) s55))
[GOOD] (assert (= (table0 #x1d) s56))
[GOOD] (assert (= (table0 #x1e) s57))
[GOOD] (assert (= (table0 #x1f) s58))
[GOOD] (assert (= (table0 #x20) s59))
[GOOD] (assert (= (table0 #x21) s60))
[GOOD] (assert (= (table0 #x22) s61))
[GOOD] (assert (= (table0 #x23) s62))
[GOOD] (assert (= (table0 #x24) s63))
[GOOD] (assert (= (table0 #x25) s64))
[GOOD] (assert (= (table0 #x26) s65))
[GOOD] (assert (= (table0 #x27) s66))
[GOOD] (assert (= (table0 #x28) s67))
[GOOD] (assert (= (table0 #x29) s68))
[GOOD] (assert (= (table0 #x2a) s69))
[GOOD] (assert (= (table0 #x2b) s70))
[GOOD] (assert (= (table0 #x2c) s71))
[GOOD] (assert (= (table0 #x2d) s72))
[GOOD] (assert (= (table0 #x2e) s73))
[GOOD] (assert (= (table0 #x2f) s74))
[GOOD] (assert (= (table0 #x30) s75))
[GOOD] (assert (= (table0 #x31) s76))
[GOOD] (assert (= (table0 #x32) s77))
[GOOD] (assert (= (table0 #x33) s78))
[GOOD] (assert (= (table0 #x34) s79))
[GOOD] (assert (= (table0 #x35) s80))
[GOOD] (assert (= (table0 #x36) s81))
[GOOD] (assert (= (table0 #x37) s82))
[GOOD] (assert (= (table0 #x38) s83))
[GOOD] (assert (= (table0 #x39) s84))
[GOOD] (assert (= (table0 #x3a) s85))
[GOOD] (assert (= (table0 #x3b) s86))
[GOOD] (assert (= (table0 #x3c) s87))
[GOOD] (assert (= (table0 #x3d) s88))
[GOOD] (assert (= (table0 #x3e) s89))
[GOOD] (assert (= (table0 #x3f) s90))
[GOOD] ; --- formula ---
[GOOD] (assert (not s93))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : CVC5
*** Exit code: ExitSuccess

FINAL:
Q.E.D.
DONE!
