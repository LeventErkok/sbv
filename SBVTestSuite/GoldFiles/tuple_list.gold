** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 0)
[GOOD] (define-fun s4 () Int 2)
[GOOD] (define-fun s6 () Int 1)
[GOOD] (define-fun s11 () String "foo")
[GOOD] (define-fun s14 () Int 4)
[GOOD] (define-fun s17 () Int 5)
[GOOD] (define-fun s23 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 1 (seq.++ (seq.unit (mkSBVTuple2 3 "foo")) (seq.unit (mkSBVTuple2 0 "bar")) (seq.unit (mkSBVTuple2 (- 1) "baz")) (seq.unit (mkSBVTuple2 (- 2) "quux")) (seq.unit (mkSBVTuple2 (- 3) "enough"))))) (seq.unit (mkSBVTuple2 (- 4) (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 (- 5) (as seq.empty (Seq (SBVTuple2 Int String)))))))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String))))) ; tracks user variable "lst"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; -- string/sequence converters
[GOOD] (define-fun-rec sbv.str2Seq ((str String)) (Seq String)
                                   (ite (= str "") (as seq.empty (Seq String))
                                                   (seq.++ (seq.unit (str.substr str 0 1))
                                                           (sbv.str2Seq (str.substr str 1 (- (str.len str) 1))))))
[GOOD] (define-fun-rec sbv.seq2Str ((seq (Seq String))) String
                                   (ite (= seq (as seq.empty (Seq String)))
                                               ""
                                               (str.++ (seq.nth seq 0)
                                                       (sbv.seq2Str (seq.extract seq 1 (- (seq.len seq) 1))))))

[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s2 () (SBVTuple2 Int (Seq (SBVTuple2 Int String))) (seq.nth s0 s1))
[GOOD] (define-fun s3 () Int (proj_1_SBVTuple2 s2))
[GOOD] (define-fun s5 () Bool (= s3 s4))
[GOOD] (define-fun s7 () (SBVTuple2 Int (Seq (SBVTuple2 Int String))) (seq.nth s0 s6))
[GOOD] (define-fun s8 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s7))
[GOOD] (define-fun s9 () (SBVTuple2 Int String) (seq.nth s8 s1))
[GOOD] (define-fun s10 () String (proj_2_SBVTuple2 s9))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s13 () Int (seq.len s0))
[GOOD] (define-fun s15 () Bool (= s13 s14))
[GOOD] (define-fun s16 () Int (seq.len s8))
[GOOD] (define-fun s18 () Bool (= s16 s17))
[GOOD] (define-fun s19 () (SBVTuple2 Int (Seq (SBVTuple2 Int String))) (seq.nth s0 s4))
[GOOD] (define-fun s20 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s19))
[GOOD] (define-fun s21 () Int (seq.len s20))
[GOOD] (define-fun s22 () Bool (= s1 s21))
[GOOD] (define-fun s24 () Bool (= s0 s23))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s5)
[GOOD] (assert s12)
[GOOD] (assert s15)
[GOOD] (assert s18)
[GOOD] (assert s22)
[GOOD] (assert s24)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String)))))
               (seq.unit (mkSBVTuple2 1
                                      (seq.++ (seq.unit (mkSBVTuple2 3 "foo"))
                                              (seq.unit (mkSBVTuple2 0 "bar"))
                                              (seq.unit (mkSBVTuple2 (- 1) "baz"))
                                              (seq.unit (mkSBVTuple2 (- 2) "quux"))
                                              (seq.unit (mkSBVTuple2 (- 3) "enough")))))
               (seq.unit (mkSBVTuple2 (- 4)
                                      (as seq.empty (Seq (SBVTuple2 Int String)))))
               (seq.unit (mkSBVTuple2 (- 5)
                                      (as seq.empty (Seq (SBVTuple2 Int String))))))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: [(2,[]),(1,[(3,"foo"),(0,"bar"),(-1,"baz"),(-2,"quux"),(-3,"enough")]),(-4,[]),(-5,[])]
DONE!
