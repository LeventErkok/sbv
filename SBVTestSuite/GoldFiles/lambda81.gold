** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; |sbv.filter @(SBV Integer -> SBV Bool)_f7406d70a9 @(SBV [Integer] -> SBV [Integer])| :: [SInteger] -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.filter @(SBV Integer -> SBV Bool)_f7406d70a9 @(SBV [Integer] -> SBV [Integer])| ((l1_s0 (Seq Int))) (Seq Int)
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 (as seq.empty (Seq Int))))
                                 (let ((l1_s6 4))
                                 (let ((l1_s9 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (seq.nth l1_s0 l1_s2)))
                                 (let ((l1_s7 (> l1_s5 l1_s6)))
                                 (let ((l1_s8 (seq.unit l1_s5)))
                                 (let ((l1_s10 (- l1_s1 l1_s9)))
                                 (let ((l1_s11 (seq.extract l1_s0 l1_s9 l1_s10)))
                                 (let ((l1_s12 (|sbv.filter @(SBV Integer -> SBV Bool)_f7406d70a9 @(SBV [Integer] -> SBV [Integer])| l1_s11)))
                                 (let ((l1_s13 (seq.++ l1_s8 l1_s12)))
                                 (let ((l1_s14 (ite l1_s7 l1_s13 l1_s12)))
                                 (let ((l1_s15 (ite l1_s3 l1_s4 l1_s14)))
                                 l1_s15))))))))))))))))
[GOOD] ; |sbv.filter @(SBV Integer -> SBV Bool)_2611d6a22d @(SBV [Integer] -> SBV [Integer])| :: [SInteger] -> [SInteger] [Recursive]
[GOOD] (define-fun-rec |sbv.filter @(SBV Integer -> SBV Bool)_2611d6a22d @(SBV [Integer] -> SBV [Integer])| ((l1_s0 (Seq Int))) (Seq Int)
                                 (let ((l1_s2 0))
                                 (let ((l1_s4 (as seq.empty (Seq Int))))
                                 (let ((l1_s9 1))
                                 (let ((l1_s1 (seq.len l1_s0)))
                                 (let ((l1_s3 (= l1_s1 l1_s2)))
                                 (let ((l1_s5 (seq.nth l1_s0 l1_s2)))
                                 (let ((l1_s6 (seq.nth s0 l1_s2)))
                                 (let ((l1_s7 (> l1_s5 l1_s6)))
                                 (let ((l1_s8 (seq.unit l1_s5)))
                                 (let ((l1_s10 (- l1_s1 l1_s9)))
                                 (let ((l1_s11 (seq.extract l1_s0 l1_s9 l1_s10)))
                                 (let ((l1_s12 (|sbv.filter @(SBV Integer -> SBV Bool)_2611d6a22d @(SBV [Integer] -> SBV [Integer])| l1_s11)))
                                 (let ((l1_s13 (seq.++ l1_s8 l1_s12)))
                                 (let ((l1_s14 (ite l1_s7 l1_s13 l1_s12)))
                                 (let ((l1_s15 (ite l1_s3 l1_s4 l1_s14)))
                                 l1_s15))))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () (Seq Int) (|sbv.filter @(SBV Integer -> SBV Bool)_2611d6a22d @(SBV [Integer] -> SBV [Integer])| s0))
[GOOD] (define-fun s2 () (Seq Int) (|sbv.filter @(SBV Integer -> SBV Bool)_f7406d70a9 @(SBV [Integer] -> SBV [Integer])| s0))
[GOOD] (define-fun s3 () Bool (distinct s1 s2))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.unit 5)))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:"  s0 = [5] :: [Integer]"
DONE!
