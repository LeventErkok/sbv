** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 1)
[GOOD] (define-fun s7 () String "foo")
[GOOD] (define-fun s10 () String (_ char #x63))
[GOOD] (define-fun s13 () (_ BitVec 8) #x00)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (SBVTuple2 (SBVTuple2 Int (SBVTuple2 String String)) (_ BitVec 8))) ; tracks user variable "abcd"
[GOOD] (assert (= 1 (str.len (proj_2_SBVTuple2 (proj_2_SBVTuple2 (proj_1_SBVTuple2 s0))))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () (SBVTuple2 Int (SBVTuple2 String String)) (proj_1_SBVTuple2 s0))
[GOOD] (define-fun s2 () Int (proj_1_SBVTuple2 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s5 () (SBVTuple2 String String) (proj_2_SBVTuple2 s1))
[GOOD] (define-fun s6 () String (proj_1_SBVTuple2 s5))
[GOOD] (define-fun s8 () Bool (= s6 s7))
[GOOD] (define-fun s9 () String (proj_2_SBVTuple2 s5))
[GOOD] (define-fun s11 () Bool (= s9 s10))
[GOOD] (define-fun s12 () (_ BitVec 8) (proj_2_SBVTuple2 s0))
[GOOD] (define-fun s14 () Bool (= s12 s13))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s8)
[GOOD] (assert s11)
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (mkSBVTuple2 (mkSBVTuple2 1 (mkSBVTuple2 "foo" "c")) #x00)))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: ((1,("foo",'c')),0)
DONE!
