** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (par (nm val) (
           (Val (getVal_1 val))
           (Var (getVar_1 nm))
           (Add (getAdd_1 (Expr nm val)) (getAdd_2 (Expr nm val)))
           (Mul (getMul_1 (Expr nm val)) (getMul_2 (Expr nm val)))
           (Let (getLet_1 nm) (getLet_2 (Expr nm val)) (getLet_3 (Expr nm val)))
       )))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () (Expr String Int) ((as Val (Expr String Int)) (- 5)))
[GOOD] (define-fun s2 () Int 10)
[GOOD] (define-fun s4 () Int 3)
[GOOD] (define-fun s6 () Int 4)
[GOOD] (define-fun s8 () Int 5)
[GOOD] (define-fun s9 () Int 6)
[GOOD] (define-fun s13 () (Expr String Int) ((as Val (Expr String Int)) (- 4)))
[GOOD] (define-fun s22 () (Expr String Int) ((as Val (Expr String Int)) (- 3)))
[GOOD] (define-fun s31 () (Expr String Int) ((as Val (Expr String Int)) (- 2)))
[GOOD] (define-fun s40 () (Expr String Int) ((as Val (Expr String Int)) (- 1)))
[GOOD] (define-fun s49 () (Expr String Int) ((as Val (Expr String Int)) 0))
[GOOD] (define-fun s58 () (Expr String Int) ((as Val (Expr String Int)) 1))
[GOOD] (define-fun s67 () (Expr String Int) ((as Val (Expr String Int)) 2))
[GOOD] (define-fun s76 () (Expr String Int) ((as Val (Expr String Int)) 3))
[GOOD] (define-fun s85 () (Expr String Int) ((as Val (Expr String Int)) 4))
[GOOD] (define-fun s94 () (Expr String Int) ((as Val (Expr String Int)) 5))
[GOOD] (define-fun s103 () (Expr String Int) ((as Val (Expr String Int)) 6))
[GOOD] (define-fun s112 () (Expr String Int) ((as Val (Expr String Int)) 7))
[GOOD] (define-fun s121 () (Expr String Int) ((as Val (Expr String Int)) 8))
[GOOD] (define-fun s130 () (Expr String Int) ((as Val (Expr String Int)) 9))
[GOOD] (define-fun s139 () Int 45)
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (getVal_1 s0))
[GOOD] (define-fun s3 () Bool (< s1 s2))
[GOOD] (define-fun s5 () Bool (= s1 s2))
[GOOD] (define-fun s7 () Bool (> s1 s2))
[GOOD] (define-fun s10 () Int (ite s7 s8 s9))
[GOOD] (define-fun s11 () Int (ite s5 s6 s10))
[GOOD] (define-fun s12 () Int (ite s3 s4 s11))
[GOOD] (define-fun s14 () Int (getVal_1 s13))
[GOOD] (define-fun s15 () Bool (< s14 s2))
[GOOD] (define-fun s16 () Bool (= s2 s14))
[GOOD] (define-fun s17 () Bool (> s14 s2))
[GOOD] (define-fun s18 () Int (ite s17 s8 s9))
[GOOD] (define-fun s19 () Int (ite s16 s6 s18))
[GOOD] (define-fun s20 () Int (ite s15 s4 s19))
[GOOD] (define-fun s21 () Int (+ s12 s20))
[GOOD] (define-fun s23 () Int (getVal_1 s22))
[GOOD] (define-fun s24 () Bool (< s23 s2))
[GOOD] (define-fun s25 () Bool (= s2 s23))
[GOOD] (define-fun s26 () Bool (> s23 s2))
[GOOD] (define-fun s27 () Int (ite s26 s8 s9))
[GOOD] (define-fun s28 () Int (ite s25 s6 s27))
[GOOD] (define-fun s29 () Int (ite s24 s4 s28))
[GOOD] (define-fun s30 () Int (+ s21 s29))
[GOOD] (define-fun s32 () Int (getVal_1 s31))
[GOOD] (define-fun s33 () Bool (< s32 s2))
[GOOD] (define-fun s34 () Bool (= s2 s32))
[GOOD] (define-fun s35 () Bool (> s32 s2))
[GOOD] (define-fun s36 () Int (ite s35 s8 s9))
[GOOD] (define-fun s37 () Int (ite s34 s6 s36))
[GOOD] (define-fun s38 () Int (ite s33 s4 s37))
[GOOD] (define-fun s39 () Int (+ s30 s38))
[GOOD] (define-fun s41 () Int (getVal_1 s40))
[GOOD] (define-fun s42 () Bool (< s41 s2))
[GOOD] (define-fun s43 () Bool (= s2 s41))
[GOOD] (define-fun s44 () Bool (> s41 s2))
[GOOD] (define-fun s45 () Int (ite s44 s8 s9))
[GOOD] (define-fun s46 () Int (ite s43 s6 s45))
[GOOD] (define-fun s47 () Int (ite s42 s4 s46))
[GOOD] (define-fun s48 () Int (+ s39 s47))
[GOOD] (define-fun s50 () Int (getVal_1 s49))
[GOOD] (define-fun s51 () Bool (< s50 s2))
[GOOD] (define-fun s52 () Bool (= s2 s50))
[GOOD] (define-fun s53 () Bool (> s50 s2))
[GOOD] (define-fun s54 () Int (ite s53 s8 s9))
[GOOD] (define-fun s55 () Int (ite s52 s6 s54))
[GOOD] (define-fun s56 () Int (ite s51 s4 s55))
[GOOD] (define-fun s57 () Int (+ s48 s56))
[GOOD] (define-fun s59 () Int (getVal_1 s58))
[GOOD] (define-fun s60 () Bool (< s59 s2))
[GOOD] (define-fun s61 () Bool (= s2 s59))
[GOOD] (define-fun s62 () Bool (> s59 s2))
[GOOD] (define-fun s63 () Int (ite s62 s8 s9))
[GOOD] (define-fun s64 () Int (ite s61 s6 s63))
[GOOD] (define-fun s65 () Int (ite s60 s4 s64))
[GOOD] (define-fun s66 () Int (+ s57 s65))
[GOOD] (define-fun s68 () Int (getVal_1 s67))
[GOOD] (define-fun s69 () Bool (< s68 s2))
[GOOD] (define-fun s70 () Bool (= s2 s68))
[GOOD] (define-fun s71 () Bool (> s68 s2))
[GOOD] (define-fun s72 () Int (ite s71 s8 s9))
[GOOD] (define-fun s73 () Int (ite s70 s6 s72))
[GOOD] (define-fun s74 () Int (ite s69 s4 s73))
[GOOD] (define-fun s75 () Int (+ s66 s74))
[GOOD] (define-fun s77 () Int (getVal_1 s76))
[GOOD] (define-fun s78 () Bool (< s77 s2))
[GOOD] (define-fun s79 () Bool (= s2 s77))
[GOOD] (define-fun s80 () Bool (> s77 s2))
[GOOD] (define-fun s81 () Int (ite s80 s8 s9))
[GOOD] (define-fun s82 () Int (ite s79 s6 s81))
[GOOD] (define-fun s83 () Int (ite s78 s4 s82))
[GOOD] (define-fun s84 () Int (+ s75 s83))
[GOOD] (define-fun s86 () Int (getVal_1 s85))
[GOOD] (define-fun s87 () Bool (< s86 s2))
[GOOD] (define-fun s88 () Bool (= s2 s86))
[GOOD] (define-fun s89 () Bool (> s86 s2))
[GOOD] (define-fun s90 () Int (ite s89 s8 s9))
[GOOD] (define-fun s91 () Int (ite s88 s6 s90))
[GOOD] (define-fun s92 () Int (ite s87 s4 s91))
[GOOD] (define-fun s93 () Int (+ s84 s92))
[GOOD] (define-fun s95 () Int (getVal_1 s94))
[GOOD] (define-fun s96 () Bool (< s95 s2))
[GOOD] (define-fun s97 () Bool (= s2 s95))
[GOOD] (define-fun s98 () Bool (> s95 s2))
[GOOD] (define-fun s99 () Int (ite s98 s8 s9))
[GOOD] (define-fun s100 () Int (ite s97 s6 s99))
[GOOD] (define-fun s101 () Int (ite s96 s4 s100))
[GOOD] (define-fun s102 () Int (+ s93 s101))
[GOOD] (define-fun s104 () Int (getVal_1 s103))
[GOOD] (define-fun s105 () Bool (< s104 s2))
[GOOD] (define-fun s106 () Bool (= s2 s104))
[GOOD] (define-fun s107 () Bool (> s104 s2))
[GOOD] (define-fun s108 () Int (ite s107 s8 s9))
[GOOD] (define-fun s109 () Int (ite s106 s6 s108))
[GOOD] (define-fun s110 () Int (ite s105 s4 s109))
[GOOD] (define-fun s111 () Int (+ s102 s110))
[GOOD] (define-fun s113 () Int (getVal_1 s112))
[GOOD] (define-fun s114 () Bool (< s113 s2))
[GOOD] (define-fun s115 () Bool (= s2 s113))
[GOOD] (define-fun s116 () Bool (> s113 s2))
[GOOD] (define-fun s117 () Int (ite s116 s8 s9))
[GOOD] (define-fun s118 () Int (ite s115 s6 s117))
[GOOD] (define-fun s119 () Int (ite s114 s4 s118))
[GOOD] (define-fun s120 () Int (+ s111 s119))
[GOOD] (define-fun s122 () Int (getVal_1 s121))
[GOOD] (define-fun s123 () Bool (< s122 s2))
[GOOD] (define-fun s124 () Bool (= s2 s122))
[GOOD] (define-fun s125 () Bool (> s122 s2))
[GOOD] (define-fun s126 () Int (ite s125 s8 s9))
[GOOD] (define-fun s127 () Int (ite s124 s6 s126))
[GOOD] (define-fun s128 () Int (ite s123 s4 s127))
[GOOD] (define-fun s129 () Int (+ s120 s128))
[GOOD] (define-fun s131 () Int (getVal_1 s130))
[GOOD] (define-fun s132 () Bool (< s131 s2))
[GOOD] (define-fun s133 () Bool (= s2 s131))
[GOOD] (define-fun s134 () Bool (> s131 s2))
[GOOD] (define-fun s135 () Int (ite s134 s8 s9))
[GOOD] (define-fun s136 () Int (ite s133 s6 s135))
[GOOD] (define-fun s137 () Int (ite s132 s4 s136))
[GOOD] (define-fun s138 () Int (+ s129 s137))
[GOOD] (define-fun s140 () Bool (distinct s138 s139))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s140)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
