** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has rational values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] (declare-datatype SBVRational ((SBV.Rational (sbv.rat.numerator Int) (sbv.rat.denominator Int))))

[GOOD] (define-fun sbv.rat.eq ((x SBVRational) (y SBVRational)) Bool
          (= (* (sbv.rat.numerator   x) (sbv.rat.denominator y))
             (* (sbv.rat.denominator x) (sbv.rat.numerator   y)))
       )

[GOOD] (define-fun sbv.rat.notEq ((x SBVRational) (y SBVRational)) Bool
          (not (sbv.rat.eq x y))
       )
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Array (SBVTuple2 String SBVRational) (SBVTuple2 SBVRational String))) ; tracks user variable "x"
[GOOD] (assert (forall ((array0 (SBVTuple2 String SBVRational))) (and (< 0 (sbv.rat.denominator (proj_1_SBVTuple2 (select s0 array0)))) (= 1 (str.len (proj_2_SBVTuple2 (select s0 array0)))))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () (SBVTuple2 String SBVRational) (mkSBVTuple2 (_ char #x7a) (SBV.Rational 5 3)))
[GOOD] (define-fun s3 () (SBVTuple2 SBVRational String) (mkSBVTuple2 (SBV.Rational 5 3) (_ char #x7a)))
[GOOD] (define-fun s2 () (SBVTuple2 SBVRational String) (select s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (assert s4)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:Sat
DONE!
