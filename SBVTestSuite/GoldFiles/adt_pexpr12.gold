** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (par (nm val) (
           (Val (getVal_1 val))
           (Var (getVar_1 nm))
           (Add (getAdd_1 (Expr nm val)) (getAdd_2 (Expr nm val)))
           (Mul (getMul_1 (Expr nm val)) (getMul_2 (Expr nm val)))
           (Let (getLet_1 nm) (getLet_2 (Expr nm val)) (getLet_3 (Expr nm val)))
       )))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s10 () (Expr String Int) ((as Val (Expr String Int)) 11))
[GOOD] (define-fun s12 () (Expr String Int) ((as Val (Expr String Int)) 12))
[GOOD] (define-fun s14 () (Expr String Int) ((as Val (Expr String Int)) 13))
[GOOD] (define-fun s16 () (Expr String Int) ((as Val (Expr String Int)) 14))
[GOOD] (define-fun s18 () (Expr String Int) ((as Val (Expr String Int)) 15))
[GOOD] (define-fun s20 () (Expr String Int) ((as Val (Expr String Int)) 16))
[GOOD] (define-fun s22 () (Expr String Int) ((as Val (Expr String Int)) 17))
[GOOD] (define-fun s24 () (Expr String Int) ((as Val (Expr String Int)) 18))
[GOOD] (define-fun s26 () (Expr String Int) ((as Val (Expr String Int)) 19))
[GOOD] (define-fun s28 () (Expr String Int) ((as Val (Expr String Int)) 20))
[GOOD] (define-fun s41 () String "a")
[GOOD] (define-fun s44 () Int 0)
[GOOD] (define-fun s45 () String "b")
[GOOD] (define-fun s47 () String "c")
[GOOD] (define-fun s51 () Int 1)
[GOOD] (define-fun s52 () Int 2)
[GOOD] (define-fun s55 () Int 10)
[GOOD] (define-fun s58 () Int 3)
[GOOD] (define-fun s61 () Int 4)
[GOOD] (define-fun s64 () Int 5)
[GOOD] (define-fun s65 () Int 6)
[GOOD] (define-fun s279 () Int 50)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Expr String Int))
[GOOD] (declare-fun s1 () (Expr String Int))
[GOOD] (declare-fun s2 () (Expr String Int))
[GOOD] (declare-fun s3 () (Expr String Int))
[GOOD] (declare-fun s4 () (Expr String Int))
[GOOD] (declare-fun s5 () (Expr String Int))
[GOOD] (declare-fun s6 () (Expr String Int))
[GOOD] (declare-fun s7 () (Expr String Int))
[GOOD] (declare-fun s8 () (Expr String Int))
[GOOD] (declare-fun s9 () (Expr String Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s11 () Bool (= s0 s10))
[GOOD] (define-fun s13 () Bool (= s1 s12))
[GOOD] (define-fun s15 () Bool (= s2 s14))
[GOOD] (define-fun s17 () Bool (= s3 s16))
[GOOD] (define-fun s19 () Bool (= s4 s18))
[GOOD] (define-fun s21 () Bool (= s5 s20))
[GOOD] (define-fun s23 () Bool (= s6 s22))
[GOOD] (define-fun s25 () Bool (= s7 s24))
[GOOD] (define-fun s27 () Bool (= s8 s26))
[GOOD] (define-fun s29 () Bool (= s9 s28))
[GOOD] (define-fun s30 () Bool (and s27 s29))
[GOOD] (define-fun s31 () Bool (and s25 s30))
[GOOD] (define-fun s32 () Bool (and s23 s31))
[GOOD] (define-fun s33 () Bool (and s21 s32))
[GOOD] (define-fun s34 () Bool (and s19 s33))
[GOOD] (define-fun s35 () Bool (and s17 s34))
[GOOD] (define-fun s36 () Bool (and s15 s35))
[GOOD] (define-fun s37 () Bool (and s13 s36))
[GOOD] (define-fun s38 () Bool (and s11 s37))
[GOOD] (define-fun s39 () Bool ((as is-Var Bool) s0))
[GOOD] (define-fun s40 () String (getVar_1 s0))
[GOOD] (define-fun s42 () Bool (= s40 s41))
[GOOD] (define-fun s43 () Bool (and s39 s42))
[GOOD] (define-fun s46 () Bool (= s40 s45))
[GOOD] (define-fun s48 () Bool (= s40 s47))
[GOOD] (define-fun s49 () Bool (or s46 s48))
[GOOD] (define-fun s50 () Bool (and s39 s49))
[GOOD] (define-fun s53 () Bool ((as is-Val Bool) s0))
[GOOD] (define-fun s54 () Int (getVal_1 s0))
[GOOD] (define-fun s56 () Bool (< s54 s55))
[GOOD] (define-fun s57 () Bool (and s53 s56))
[GOOD] (define-fun s59 () Bool (= s54 s55))
[GOOD] (define-fun s60 () Bool (and s53 s59))
[GOOD] (define-fun s62 () Bool (> s54 s55))
[GOOD] (define-fun s63 () Bool (and s53 s62))
[GOOD] (define-fun s66 () Int (ite s63 s64 s65))
[GOOD] (define-fun s67 () Int (ite s60 s61 s66))
[GOOD] (define-fun s68 () Int (ite s57 s58 s67))
[GOOD] (define-fun s69 () Int (ite s39 s52 s68))
[GOOD] (define-fun s70 () Int (ite s50 s51 s69))
[GOOD] (define-fun s71 () Int (ite s43 s44 s70))
[GOOD] (define-fun s72 () Bool ((as is-Var Bool) s1))
[GOOD] (define-fun s73 () String (getVar_1 s1))
[GOOD] (define-fun s74 () Bool (= s41 s73))
[GOOD] (define-fun s75 () Bool (and s72 s74))
[GOOD] (define-fun s76 () Bool (= s45 s73))
[GOOD] (define-fun s77 () Bool (= s47 s73))
[GOOD] (define-fun s78 () Bool (or s76 s77))
[GOOD] (define-fun s79 () Bool (and s72 s78))
[GOOD] (define-fun s80 () Bool ((as is-Val Bool) s1))
[GOOD] (define-fun s81 () Int (getVal_1 s1))
[GOOD] (define-fun s82 () Bool (< s81 s55))
[GOOD] (define-fun s83 () Bool (and s80 s82))
[GOOD] (define-fun s84 () Bool (= s55 s81))
[GOOD] (define-fun s85 () Bool (and s80 s84))
[GOOD] (define-fun s86 () Bool (> s81 s55))
[GOOD] (define-fun s87 () Bool (and s80 s86))
[GOOD] (define-fun s88 () Int (ite s87 s64 s65))
[GOOD] (define-fun s89 () Int (ite s85 s61 s88))
[GOOD] (define-fun s90 () Int (ite s83 s58 s89))
[GOOD] (define-fun s91 () Int (ite s72 s52 s90))
[GOOD] (define-fun s92 () Int (ite s79 s51 s91))
[GOOD] (define-fun s93 () Int (ite s75 s44 s92))
[GOOD] (define-fun s94 () Int (+ s71 s93))
[GOOD] (define-fun s95 () Bool ((as is-Var Bool) s2))
[GOOD] (define-fun s96 () String (getVar_1 s2))
[GOOD] (define-fun s97 () Bool (= s41 s96))
[GOOD] (define-fun s98 () Bool (and s95 s97))
[GOOD] (define-fun s99 () Bool (= s45 s96))
[GOOD] (define-fun s100 () Bool (= s47 s96))
[GOOD] (define-fun s101 () Bool (or s99 s100))
[GOOD] (define-fun s102 () Bool (and s95 s101))
[GOOD] (define-fun s103 () Bool ((as is-Val Bool) s2))
[GOOD] (define-fun s104 () Int (getVal_1 s2))
[GOOD] (define-fun s105 () Bool (< s104 s55))
[GOOD] (define-fun s106 () Bool (and s103 s105))
[GOOD] (define-fun s107 () Bool (= s55 s104))
[GOOD] (define-fun s108 () Bool (and s103 s107))
[GOOD] (define-fun s109 () Bool (> s104 s55))
[GOOD] (define-fun s110 () Bool (and s103 s109))
[GOOD] (define-fun s111 () Int (ite s110 s64 s65))
[GOOD] (define-fun s112 () Int (ite s108 s61 s111))
[GOOD] (define-fun s113 () Int (ite s106 s58 s112))
[GOOD] (define-fun s114 () Int (ite s95 s52 s113))
[GOOD] (define-fun s115 () Int (ite s102 s51 s114))
[GOOD] (define-fun s116 () Int (ite s98 s44 s115))
[GOOD] (define-fun s117 () Int (+ s94 s116))
[GOOD] (define-fun s118 () Bool ((as is-Var Bool) s3))
[GOOD] (define-fun s119 () String (getVar_1 s3))
[GOOD] (define-fun s120 () Bool (= s41 s119))
[GOOD] (define-fun s121 () Bool (and s118 s120))
[GOOD] (define-fun s122 () Bool (= s45 s119))
[GOOD] (define-fun s123 () Bool (= s47 s119))
[GOOD] (define-fun s124 () Bool (or s122 s123))
[GOOD] (define-fun s125 () Bool (and s118 s124))
[GOOD] (define-fun s126 () Bool ((as is-Val Bool) s3))
[GOOD] (define-fun s127 () Int (getVal_1 s3))
[GOOD] (define-fun s128 () Bool (< s127 s55))
[GOOD] (define-fun s129 () Bool (and s126 s128))
[GOOD] (define-fun s130 () Bool (= s55 s127))
[GOOD] (define-fun s131 () Bool (and s126 s130))
[GOOD] (define-fun s132 () Bool (> s127 s55))
[GOOD] (define-fun s133 () Bool (and s126 s132))
[GOOD] (define-fun s134 () Int (ite s133 s64 s65))
[GOOD] (define-fun s135 () Int (ite s131 s61 s134))
[GOOD] (define-fun s136 () Int (ite s129 s58 s135))
[GOOD] (define-fun s137 () Int (ite s118 s52 s136))
[GOOD] (define-fun s138 () Int (ite s125 s51 s137))
[GOOD] (define-fun s139 () Int (ite s121 s44 s138))
[GOOD] (define-fun s140 () Int (+ s117 s139))
[GOOD] (define-fun s141 () Bool ((as is-Var Bool) s4))
[GOOD] (define-fun s142 () String (getVar_1 s4))
[GOOD] (define-fun s143 () Bool (= s41 s142))
[GOOD] (define-fun s144 () Bool (and s141 s143))
[GOOD] (define-fun s145 () Bool (= s45 s142))
[GOOD] (define-fun s146 () Bool (= s47 s142))
[GOOD] (define-fun s147 () Bool (or s145 s146))
[GOOD] (define-fun s148 () Bool (and s141 s147))
[GOOD] (define-fun s149 () Bool ((as is-Val Bool) s4))
[GOOD] (define-fun s150 () Int (getVal_1 s4))
[GOOD] (define-fun s151 () Bool (< s150 s55))
[GOOD] (define-fun s152 () Bool (and s149 s151))
[GOOD] (define-fun s153 () Bool (= s55 s150))
[GOOD] (define-fun s154 () Bool (and s149 s153))
[GOOD] (define-fun s155 () Bool (> s150 s55))
[GOOD] (define-fun s156 () Bool (and s149 s155))
[GOOD] (define-fun s157 () Int (ite s156 s64 s65))
[GOOD] (define-fun s158 () Int (ite s154 s61 s157))
[GOOD] (define-fun s159 () Int (ite s152 s58 s158))
[GOOD] (define-fun s160 () Int (ite s141 s52 s159))
[GOOD] (define-fun s161 () Int (ite s148 s51 s160))
[GOOD] (define-fun s162 () Int (ite s144 s44 s161))
[GOOD] (define-fun s163 () Int (+ s140 s162))
[GOOD] (define-fun s164 () Bool ((as is-Var Bool) s5))
[GOOD] (define-fun s165 () String (getVar_1 s5))
[GOOD] (define-fun s166 () Bool (= s41 s165))
[GOOD] (define-fun s167 () Bool (and s164 s166))
[GOOD] (define-fun s168 () Bool (= s45 s165))
[GOOD] (define-fun s169 () Bool (= s47 s165))
[GOOD] (define-fun s170 () Bool (or s168 s169))
[GOOD] (define-fun s171 () Bool (and s164 s170))
[GOOD] (define-fun s172 () Bool ((as is-Val Bool) s5))
[GOOD] (define-fun s173 () Int (getVal_1 s5))
[GOOD] (define-fun s174 () Bool (< s173 s55))
[GOOD] (define-fun s175 () Bool (and s172 s174))
[GOOD] (define-fun s176 () Bool (= s55 s173))
[GOOD] (define-fun s177 () Bool (and s172 s176))
[GOOD] (define-fun s178 () Bool (> s173 s55))
[GOOD] (define-fun s179 () Bool (and s172 s178))
[GOOD] (define-fun s180 () Int (ite s179 s64 s65))
[GOOD] (define-fun s181 () Int (ite s177 s61 s180))
[GOOD] (define-fun s182 () Int (ite s175 s58 s181))
[GOOD] (define-fun s183 () Int (ite s164 s52 s182))
[GOOD] (define-fun s184 () Int (ite s171 s51 s183))
[GOOD] (define-fun s185 () Int (ite s167 s44 s184))
[GOOD] (define-fun s186 () Int (+ s163 s185))
[GOOD] (define-fun s187 () Bool ((as is-Var Bool) s6))
[GOOD] (define-fun s188 () String (getVar_1 s6))
[GOOD] (define-fun s189 () Bool (= s41 s188))
[GOOD] (define-fun s190 () Bool (and s187 s189))
[GOOD] (define-fun s191 () Bool (= s45 s188))
[GOOD] (define-fun s192 () Bool (= s47 s188))
[GOOD] (define-fun s193 () Bool (or s191 s192))
[GOOD] (define-fun s194 () Bool (and s187 s193))
[GOOD] (define-fun s195 () Bool ((as is-Val Bool) s6))
[GOOD] (define-fun s196 () Int (getVal_1 s6))
[GOOD] (define-fun s197 () Bool (< s196 s55))
[GOOD] (define-fun s198 () Bool (and s195 s197))
[GOOD] (define-fun s199 () Bool (= s55 s196))
[GOOD] (define-fun s200 () Bool (and s195 s199))
[GOOD] (define-fun s201 () Bool (> s196 s55))
[GOOD] (define-fun s202 () Bool (and s195 s201))
[GOOD] (define-fun s203 () Int (ite s202 s64 s65))
[GOOD] (define-fun s204 () Int (ite s200 s61 s203))
[GOOD] (define-fun s205 () Int (ite s198 s58 s204))
[GOOD] (define-fun s206 () Int (ite s187 s52 s205))
[GOOD] (define-fun s207 () Int (ite s194 s51 s206))
[GOOD] (define-fun s208 () Int (ite s190 s44 s207))
[GOOD] (define-fun s209 () Int (+ s186 s208))
[GOOD] (define-fun s210 () Bool ((as is-Var Bool) s7))
[GOOD] (define-fun s211 () String (getVar_1 s7))
[GOOD] (define-fun s212 () Bool (= s41 s211))
[GOOD] (define-fun s213 () Bool (and s210 s212))
[GOOD] (define-fun s214 () Bool (= s45 s211))
[GOOD] (define-fun s215 () Bool (= s47 s211))
[GOOD] (define-fun s216 () Bool (or s214 s215))
[GOOD] (define-fun s217 () Bool (and s210 s216))
[GOOD] (define-fun s218 () Bool ((as is-Val Bool) s7))
[GOOD] (define-fun s219 () Int (getVal_1 s7))
[GOOD] (define-fun s220 () Bool (< s219 s55))
[GOOD] (define-fun s221 () Bool (and s218 s220))
[GOOD] (define-fun s222 () Bool (= s55 s219))
[GOOD] (define-fun s223 () Bool (and s218 s222))
[GOOD] (define-fun s224 () Bool (> s219 s55))
[GOOD] (define-fun s225 () Bool (and s218 s224))
[GOOD] (define-fun s226 () Int (ite s225 s64 s65))
[GOOD] (define-fun s227 () Int (ite s223 s61 s226))
[GOOD] (define-fun s228 () Int (ite s221 s58 s227))
[GOOD] (define-fun s229 () Int (ite s210 s52 s228))
[GOOD] (define-fun s230 () Int (ite s217 s51 s229))
[GOOD] (define-fun s231 () Int (ite s213 s44 s230))
[GOOD] (define-fun s232 () Int (+ s209 s231))
[GOOD] (define-fun s233 () Bool ((as is-Var Bool) s8))
[GOOD] (define-fun s234 () String (getVar_1 s8))
[GOOD] (define-fun s235 () Bool (= s41 s234))
[GOOD] (define-fun s236 () Bool (and s233 s235))
[GOOD] (define-fun s237 () Bool (= s45 s234))
[GOOD] (define-fun s238 () Bool (= s47 s234))
[GOOD] (define-fun s239 () Bool (or s237 s238))
[GOOD] (define-fun s240 () Bool (and s233 s239))
[GOOD] (define-fun s241 () Bool ((as is-Val Bool) s8))
[GOOD] (define-fun s242 () Int (getVal_1 s8))
[GOOD] (define-fun s243 () Bool (< s242 s55))
[GOOD] (define-fun s244 () Bool (and s241 s243))
[GOOD] (define-fun s245 () Bool (= s55 s242))
[GOOD] (define-fun s246 () Bool (and s241 s245))
[GOOD] (define-fun s247 () Bool (> s242 s55))
[GOOD] (define-fun s248 () Bool (and s241 s247))
[GOOD] (define-fun s249 () Int (ite s248 s64 s65))
[GOOD] (define-fun s250 () Int (ite s246 s61 s249))
[GOOD] (define-fun s251 () Int (ite s244 s58 s250))
[GOOD] (define-fun s252 () Int (ite s233 s52 s251))
[GOOD] (define-fun s253 () Int (ite s240 s51 s252))
[GOOD] (define-fun s254 () Int (ite s236 s44 s253))
[GOOD] (define-fun s255 () Int (+ s232 s254))
[GOOD] (define-fun s256 () Bool ((as is-Var Bool) s9))
[GOOD] (define-fun s257 () String (getVar_1 s9))
[GOOD] (define-fun s258 () Bool (= s41 s257))
[GOOD] (define-fun s259 () Bool (and s256 s258))
[GOOD] (define-fun s260 () Bool (= s45 s257))
[GOOD] (define-fun s261 () Bool (= s47 s257))
[GOOD] (define-fun s262 () Bool (or s260 s261))
[GOOD] (define-fun s263 () Bool (and s256 s262))
[GOOD] (define-fun s264 () Bool ((as is-Val Bool) s9))
[GOOD] (define-fun s265 () Int (getVal_1 s9))
[GOOD] (define-fun s266 () Bool (< s265 s55))
[GOOD] (define-fun s267 () Bool (and s264 s266))
[GOOD] (define-fun s268 () Bool (= s55 s265))
[GOOD] (define-fun s269 () Bool (and s264 s268))
[GOOD] (define-fun s270 () Bool (> s265 s55))
[GOOD] (define-fun s271 () Bool (and s264 s270))
[GOOD] (define-fun s272 () Int (ite s271 s64 s65))
[GOOD] (define-fun s273 () Int (ite s269 s61 s272))
[GOOD] (define-fun s274 () Int (ite s267 s58 s273))
[GOOD] (define-fun s275 () Int (ite s256 s52 s274))
[GOOD] (define-fun s276 () Int (ite s263 s51 s275))
[GOOD] (define-fun s277 () Int (ite s259 s44 s276))
[GOOD] (define-fun s278 () Int (+ s255 s277))
[GOOD] (define-fun s280 () Bool (distinct s278 s279))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s38)
[GOOD] (assert s280)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
