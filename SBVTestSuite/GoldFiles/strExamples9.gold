** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 6)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () String) ; tracks user variable "a"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; -- string/sequence converters
[GOOD] (define-fun-rec sbv.str2Seq ((str String)) (Seq String)
                                   (ite (= str "") (as seq.empty (Seq String))
                                                   (seq.++ (seq.unit (str.substr str 0 1))
                                                           (sbv.str2Seq (str.substr str 1 (- (str.len str) 1))))))
[GOOD] (define-fun-rec sbv.seq2Str ((seq (Seq String))) String
                                   (ite (= seq (as seq.empty (Seq String)))
                                               ""
                                               (str.++ (seq.nth seq 0)
                                                       (sbv.seq2Str (seq.extract seq 1 (- (seq.len seq) 1))))))

[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Bool (str.in.re s0 ((_ re.loop 1 3) (str.to.re "ab"))))
[GOOD] (define-fun s2 () Int (str.len s0))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s1)
[GOOD] (assert s4)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
