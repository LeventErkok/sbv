** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has lambda expressions, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6) (seq.unit 1) (seq.unit 8) (seq.unit 10)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () Bool)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- SBV Function definitions
[GOOD] (define-fun-rec |sbv.all_@SInteger_(lambda_((l1_s0_Int))_(let_((l1_s1_2))_(let_((l1_s3_0))_(let_((l1_s7_1))_(let_((l1_s13_(-_1)))_(let_((l1_s2_(mod_l1_s0_l1_s1)))_(let_((l1_s4_(>=_l1_s0_l1_s3)))_(let_((l1_s5_(=_l1_s2_l1_s3)))_(let_((l1_s6_(or_l1_s4_l1_s5)))_(let_((l1_s8_(ite_l1_s6_l1_s3_l1_s7)))_(let_((l1_s9_(*_l1_s1_l1_s8)))_(let_((l1_s10_(-_l1_s2_l1_s9)))_(let_((l1_s11_(>_l1_s10_l1_s3)))_(let_((l1_s12_(<_l1_s10_l1_s3)))_(let_((l1_s14_(ite_l1_s12_l1_s13_l1_s10)))_(let_((l1_s15_(ite_l1_s11_l1_s7_l1_s14)))_(let_((l1_s16_(=_l1_s13_l1_s15)))_(let_((l1_s17_(+_l1_s1_l1_s10)))_(let_((l1_s18_(ite_l1_s16_l1_s17_l1_s10)))_(let_((l1_s19_(=_l1_s3_l1_s18)))_l1_s19))))))))))))))))))))| ((lst (Seq Int))) Bool
                       (ite (= lst (as seq.empty (Seq Int)))
                            true
                            (and (select (lambda ((l1_s0 Int))
                                 (let ((l1_s1 2))
                                 (let ((l1_s3 0))
                                 (let ((l1_s7 1))
                                 (let ((l1_s13 (- 1)))
                                 (let ((l1_s2 (mod l1_s0 l1_s1)))
                                 (let ((l1_s4 (>= l1_s0 l1_s3)))
                                 (let ((l1_s5 (= l1_s2 l1_s3)))
                                 (let ((l1_s6 (or l1_s4 l1_s5)))
                                 (let ((l1_s8 (ite l1_s6 l1_s3 l1_s7)))
                                 (let ((l1_s9 (* l1_s1 l1_s8)))
                                 (let ((l1_s10 (- l1_s2 l1_s9)))
                                 (let ((l1_s11 (> l1_s10 l1_s3)))
                                 (let ((l1_s12 (< l1_s10 l1_s3)))
                                 (let ((l1_s14 (ite l1_s12 l1_s13 l1_s10)))
                                 (let ((l1_s15 (ite l1_s11 l1_s7 l1_s14)))
                                 (let ((l1_s16 (= l1_s13 l1_s15)))
                                 (let ((l1_s17 (+ l1_s1 l1_s10)))
                                 (let ((l1_s18 (ite l1_s16 l1_s17 l1_s10)))
                                 (let ((l1_s19 (= l1_s3 l1_s18)))
                                 l1_s19)))))))))))))))))))) (seq.nth lst 0)) (|sbv.all_@SInteger_(lambda_((l1_s0_Int))_(let_((l1_s1_2))_(let_((l1_s3_0))_(let_((l1_s7_1))_(let_((l1_s13_(-_1)))_(let_((l1_s2_(mod_l1_s0_l1_s1)))_(let_((l1_s4_(>=_l1_s0_l1_s3)))_(let_((l1_s5_(=_l1_s2_l1_s3)))_(let_((l1_s6_(or_l1_s4_l1_s5)))_(let_((l1_s8_(ite_l1_s6_l1_s3_l1_s7)))_(let_((l1_s9_(*_l1_s1_l1_s8)))_(let_((l1_s10_(-_l1_s2_l1_s9)))_(let_((l1_s11_(>_l1_s10_l1_s3)))_(let_((l1_s12_(<_l1_s10_l1_s3)))_(let_((l1_s14_(ite_l1_s12_l1_s13_l1_s10)))_(let_((l1_s15_(ite_l1_s11_l1_s7_l1_s14)))_(let_((l1_s16_(=_l1_s13_l1_s15)))_(let_((l1_s17_(+_l1_s1_l1_s10)))_(let_((l1_s18_(ite_l1_s16_l1_s17_l1_s10)))_(let_((l1_s19_(=_l1_s3_l1_s18)))_l1_s19))))))))))))))))))))| (seq.extract lst 1 (- (seq.len lst) 1))))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () Bool (|sbv.all_@SInteger_(lambda_((l1_s0_Int))_(let_((l1_s1_2))_(let_((l1_s3_0))_(let_((l1_s7_1))_(let_((l1_s13_(-_1)))_(let_((l1_s2_(mod_l1_s0_l1_s1)))_(let_((l1_s4_(>=_l1_s0_l1_s3)))_(let_((l1_s5_(=_l1_s2_l1_s3)))_(let_((l1_s6_(or_l1_s4_l1_s5)))_(let_((l1_s8_(ite_l1_s6_l1_s3_l1_s7)))_(let_((l1_s9_(*_l1_s1_l1_s8)))_(let_((l1_s10_(-_l1_s2_l1_s9)))_(let_((l1_s11_(>_l1_s10_l1_s3)))_(let_((l1_s12_(<_l1_s10_l1_s3)))_(let_((l1_s14_(ite_l1_s12_l1_s13_l1_s10)))_(let_((l1_s15_(ite_l1_s11_l1_s7_l1_s14)))_(let_((l1_s16_(=_l1_s13_l1_s15)))_(let_((l1_s17_(+_l1_s1_l1_s10)))_(let_((l1_s18_(ite_l1_s16_l1_s17_l1_s10)))_(let_((l1_s19_(=_l1_s3_l1_s18)))_l1_s19))))))))))))))))))))| s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 false))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 2)
               (seq.unit 4)
               (seq.unit 6)
               (seq.unit 1)
               (seq.unit 8)
               (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 false))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [2,4,6,1,8,10] :: [Integer]
  s1 =          False :: Bool
