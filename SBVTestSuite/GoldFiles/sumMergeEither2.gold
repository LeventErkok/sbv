** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVEither 2)) ((par (T1 T2)
                                           ((left_SBVEither  (get_left_SBVEither  T1))
                                            (right_SBVEither (get_right_SBVEither T2))))))
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (SBVEither Int Bool))
[GOOD] (declare-fun s1 () (SBVEither Int Bool))
[GOOD] (declare-fun s2 () Bool)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () (SBVEither Int Bool) (ite s2 s0 s1))
[GOOD] (define-fun s4 () Bool ((_ is (left_SBVEither (Int) (SBVEither Int Bool))) s3))
[GOOD] (define-fun s5 () Bool (ite s4 false true))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (right_SBVEither false)))
[SEND] (get-value (s1))
[RECV] ((s1 (right_SBVEither false)))
[SEND] (get-value (s2))
[RECV] ((s2 false))

MODEL: SMTModel {modelObjectives = [], modelBindings = Nothing, modelAssocs = [("s0",Right False :: Either Integer Bool),("s1",Right False :: Either Integer Bool),("s2",False :: Bool)], modelUIFuns = []}
DONE.*** Solver   : Z3
*** Exit code: ExitSuccess
