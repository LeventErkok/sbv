** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 21)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int)
[GOOD] (declare-fun s1 () Bool)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; isEvenOdd :: SInteger -> (SBool, SBool) [Recursive]
[GOOD] (define-fun-rec isEvenOdd ((l1_s0 Int)) (SBVTuple2 Bool Bool)
                                 (let ((l1_s1 0))
                                 (let ((l1_s6 (mkSBVTuple2 true false)))
                                 (let ((l1_s7 1))
                                 (let ((l1_s2 (< l1_s0 l1_s1)))
                                 (let ((l1_s3 (- l1_s0)))
                                 (let ((l1_s4 (isEvenOdd l1_s3)))
                                 (let ((l1_s5 (= l1_s0 l1_s1)))
                                 (let ((l1_s8 (- l1_s0 l1_s7)))
                                 (let ((l1_s9 (isEvenOdd l1_s8)))
                                 (let ((l1_s10 (proj_2_SBVTuple2 l1_s9)))
                                 (let ((l1_s11 (proj_1_SBVTuple2 l1_s9)))
                                 (let ((l1_s12 ((as mkSBVTuple2 (SBVTuple2 Bool Bool)) l1_s10 l1_s11)))
                                 (let ((l1_s13 (ite l1_s5 l1_s6 l1_s12)))
                                 (let ((l1_s14 (ite l1_s2 l1_s4 l1_s13)))
                                 l1_s14)))))))))))))))
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () (SBVTuple2 Bool Bool) (isEvenOdd s0))
[GOOD] (define-fun s5 () Bool (proj_2_SBVTuple2 s4))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s7 () Bool (and s3 s6))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s7)
[GOOD] (declare-fun s8 () Int)
[GOOD] (declare-fun s9 () Bool)
[GOOD] (define-fun s10 () Bool (= s2 s8))
[GOOD] (define-fun s11 () (SBVTuple2 Bool Bool) (isEvenOdd s8))
[GOOD] (define-fun s12 () Bool (proj_2_SBVTuple2 s11))
[GOOD] (define-fun s13 () Bool (= s9 s12))
[GOOD] (define-fun s14 () Bool (and s10 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 21))
[SEND] (get-value (s1))
[RECV] ((s1 true))
[SEND] (get-value (s8))
[RECV] ((s8 21))
[SEND] (get-value (s9))
[RECV] ((s9 true))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 =   21 :: Integer
  s1 = True :: Bool
  s8 =   21 :: Integer
  s9 = True :: Bool
