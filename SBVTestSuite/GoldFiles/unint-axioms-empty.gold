** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has user-defined sorts, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] (declare-sort Thing 0)  ; N.B. Uninterpreted sort.
[GOOD] (declare-fun Thing_witness () Thing)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Thing Thing_witness)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s4 () Thing)
[GOOD] (declare-fun s5 () Thing)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun thingCompare (Thing Thing) Bool)
[GOOD] (declare-fun thingMerge (Thing Thing) Thing)
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s0 () Bool (forall ((l1_s0 Thing))
         (thingCompare l1_s0 l1_s0)))
[GOOD] (define-fun s1 () Bool (forall ((l1_s0 Thing) (l1_s1 Thing))
                                 (let ((l1_s2 (thingMerge l1_s0 l1_s1)))
                                 (let ((l1_s3 (distinct l1_s0 l1_s2)))
                                 l1_s3))))
[GOOD] (define-fun s3 () Thing (thingMerge s2 s2))
[GOOD] (define-fun s6 () Bool (= s4 s5))
[GOOD] (define-fun s7 () Bool (thingCompare s4 s5))
[GOOD] (define-fun s8 () Bool (=> s6 s7))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s0)
[GOOD] (assert s1)
[GOOD] (assert (not s8))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:True
DONE!
