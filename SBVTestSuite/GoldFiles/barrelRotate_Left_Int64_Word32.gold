** Calling: cvc5 --lang smt --incremental --nl-cov
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_UFBV)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (_ BitVec 32) #x00000040)
[GOOD] (define-fun s5 () (_ BitVec 1) #b0)
[GOOD] (define-fun s91 () (_ BitVec 64) #x0000000000000000)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (_ BitVec 64))
[GOOD] (declare-fun s1 () (_ BitVec 32))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] (declare-fun table0 ((_ BitVec 32)) (_ BitVec 64))
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () (_ BitVec 32) (bvurem s1 s2))
[GOOD] (define-fun s4 () (_ BitVec 1) ((_ extract 5 5) s3))
[GOOD] (define-fun s6 () Bool (distinct s4 s5))
[GOOD] (define-fun s7 () (_ BitVec 1) ((_ extract 4 4) s3))
[GOOD] (define-fun s8 () Bool (distinct s5 s7))
[GOOD] (define-fun s9 () (_ BitVec 1) ((_ extract 3 3) s3))
[GOOD] (define-fun s10 () Bool (distinct s5 s9))
[GOOD] (define-fun s11 () (_ BitVec 1) ((_ extract 2 2) s3))
[GOOD] (define-fun s12 () Bool (distinct s5 s11))
[GOOD] (define-fun s13 () (_ BitVec 1) ((_ extract 1 1) s3))
[GOOD] (define-fun s14 () Bool (distinct s5 s13))
[GOOD] (define-fun s15 () (_ BitVec 1) ((_ extract 0 0) s3))
[GOOD] (define-fun s16 () Bool (distinct s5 s15))
[GOOD] (define-fun s17 () (_ BitVec 64) ((_ rotate_left 1) s0))
[GOOD] (define-fun s18 () (_ BitVec 64) (ite s16 s17 s0))
[GOOD] (define-fun s19 () (_ BitVec 64) ((_ rotate_left 2) s18))
[GOOD] (define-fun s20 () (_ BitVec 64) (ite s14 s19 s18))
[GOOD] (define-fun s21 () (_ BitVec 64) ((_ rotate_left 4) s20))
[GOOD] (define-fun s22 () (_ BitVec 64) (ite s12 s21 s20))
[GOOD] (define-fun s23 () (_ BitVec 64) ((_ rotate_left 8) s22))
[GOOD] (define-fun s24 () (_ BitVec 64) (ite s10 s23 s22))
[GOOD] (define-fun s25 () (_ BitVec 64) ((_ rotate_left 16) s24))
[GOOD] (define-fun s26 () (_ BitVec 64) (ite s8 s25 s24))
[GOOD] (define-fun s27 () (_ BitVec 64) ((_ rotate_left 32) s26))
[GOOD] (define-fun s28 () (_ BitVec 64) (ite s6 s27 s26))
[GOOD] (define-fun s29 () (_ BitVec 64) ((_ rotate_left 2) s0))
[GOOD] (define-fun s30 () (_ BitVec 64) ((_ rotate_left 3) s0))
[GOOD] (define-fun s31 () (_ BitVec 64) ((_ rotate_left 4) s0))
[GOOD] (define-fun s32 () (_ BitVec 64) ((_ rotate_left 5) s0))
[GOOD] (define-fun s33 () (_ BitVec 64) ((_ rotate_left 6) s0))
[GOOD] (define-fun s34 () (_ BitVec 64) ((_ rotate_left 7) s0))
[GOOD] (define-fun s35 () (_ BitVec 64) ((_ rotate_left 8) s0))
[GOOD] (define-fun s36 () (_ BitVec 64) ((_ rotate_left 9) s0))
[GOOD] (define-fun s37 () (_ BitVec 64) ((_ rotate_left 10) s0))
[GOOD] (define-fun s38 () (_ BitVec 64) ((_ rotate_left 11) s0))
[GOOD] (define-fun s39 () (_ BitVec 64) ((_ rotate_left 12) s0))
[GOOD] (define-fun s40 () (_ BitVec 64) ((_ rotate_left 13) s0))
[GOOD] (define-fun s41 () (_ BitVec 64) ((_ rotate_left 14) s0))
[GOOD] (define-fun s42 () (_ BitVec 64) ((_ rotate_left 15) s0))
[GOOD] (define-fun s43 () (_ BitVec 64) ((_ rotate_left 16) s0))
[GOOD] (define-fun s44 () (_ BitVec 64) ((_ rotate_left 17) s0))
[GOOD] (define-fun s45 () (_ BitVec 64) ((_ rotate_left 18) s0))
[GOOD] (define-fun s46 () (_ BitVec 64) ((_ rotate_left 19) s0))
[GOOD] (define-fun s47 () (_ BitVec 64) ((_ rotate_left 20) s0))
[GOOD] (define-fun s48 () (_ BitVec 64) ((_ rotate_left 21) s0))
[GOOD] (define-fun s49 () (_ BitVec 64) ((_ rotate_left 22) s0))
[GOOD] (define-fun s50 () (_ BitVec 64) ((_ rotate_left 23) s0))
[GOOD] (define-fun s51 () (_ BitVec 64) ((_ rotate_left 24) s0))
[GOOD] (define-fun s52 () (_ BitVec 64) ((_ rotate_left 25) s0))
[GOOD] (define-fun s53 () (_ BitVec 64) ((_ rotate_left 26) s0))
[GOOD] (define-fun s54 () (_ BitVec 64) ((_ rotate_left 27) s0))
[GOOD] (define-fun s55 () (_ BitVec 64) ((_ rotate_left 28) s0))
[GOOD] (define-fun s56 () (_ BitVec 64) ((_ rotate_left 29) s0))
[GOOD] (define-fun s57 () (_ BitVec 64) ((_ rotate_left 30) s0))
[GOOD] (define-fun s58 () (_ BitVec 64) ((_ rotate_left 31) s0))
[GOOD] (define-fun s59 () (_ BitVec 64) ((_ rotate_left 32) s0))
[GOOD] (define-fun s60 () (_ BitVec 64) ((_ rotate_left 33) s0))
[GOOD] (define-fun s61 () (_ BitVec 64) ((_ rotate_left 34) s0))
[GOOD] (define-fun s62 () (_ BitVec 64) ((_ rotate_left 35) s0))
[GOOD] (define-fun s63 () (_ BitVec 64) ((_ rotate_left 36) s0))
[GOOD] (define-fun s64 () (_ BitVec 64) ((_ rotate_left 37) s0))
[GOOD] (define-fun s65 () (_ BitVec 64) ((_ rotate_left 38) s0))
[GOOD] (define-fun s66 () (_ BitVec 64) ((_ rotate_left 39) s0))
[GOOD] (define-fun s67 () (_ BitVec 64) ((_ rotate_left 40) s0))
[GOOD] (define-fun s68 () (_ BitVec 64) ((_ rotate_left 41) s0))
[GOOD] (define-fun s69 () (_ BitVec 64) ((_ rotate_left 42) s0))
[GOOD] (define-fun s70 () (_ BitVec 64) ((_ rotate_left 43) s0))
[GOOD] (define-fun s71 () (_ BitVec 64) ((_ rotate_left 44) s0))
[GOOD] (define-fun s72 () (_ BitVec 64) ((_ rotate_left 45) s0))
[GOOD] (define-fun s73 () (_ BitVec 64) ((_ rotate_left 46) s0))
[GOOD] (define-fun s74 () (_ BitVec 64) ((_ rotate_left 47) s0))
[GOOD] (define-fun s75 () (_ BitVec 64) ((_ rotate_left 48) s0))
[GOOD] (define-fun s76 () (_ BitVec 64) ((_ rotate_left 49) s0))
[GOOD] (define-fun s77 () (_ BitVec 64) ((_ rotate_left 50) s0))
[GOOD] (define-fun s78 () (_ BitVec 64) ((_ rotate_left 51) s0))
[GOOD] (define-fun s79 () (_ BitVec 64) ((_ rotate_left 52) s0))
[GOOD] (define-fun s80 () (_ BitVec 64) ((_ rotate_left 53) s0))
[GOOD] (define-fun s81 () (_ BitVec 64) ((_ rotate_left 54) s0))
[GOOD] (define-fun s82 () (_ BitVec 64) ((_ rotate_left 55) s0))
[GOOD] (define-fun s83 () (_ BitVec 64) ((_ rotate_left 56) s0))
[GOOD] (define-fun s84 () (_ BitVec 64) ((_ rotate_left 57) s0))
[GOOD] (define-fun s85 () (_ BitVec 64) ((_ rotate_left 58) s0))
[GOOD] (define-fun s86 () (_ BitVec 64) ((_ rotate_left 59) s0))
[GOOD] (define-fun s87 () (_ BitVec 64) ((_ rotate_left 60) s0))
[GOOD] (define-fun s88 () (_ BitVec 64) ((_ rotate_left 61) s0))
[GOOD] (define-fun s89 () (_ BitVec 64) ((_ rotate_left 62) s0))
[GOOD] (define-fun s90 () (_ BitVec 64) ((_ rotate_left 63) s0))
[GOOD] (define-fun s92 () (_ BitVec 64) (ite (bvule #x00000040 s3) s91 (table0 s3)))
[GOOD] (define-fun s93 () Bool (= s28 s92))
[GOOD] ; --- delayedEqualities ---
[GOOD] (assert (= (table0 #x00000000) s0))
[GOOD] (assert (= (table0 #x00000001) s17))
[GOOD] (assert (= (table0 #x00000002) s29))
[GOOD] (assert (= (table0 #x00000003) s30))
[GOOD] (assert (= (table0 #x00000004) s31))
[GOOD] (assert (= (table0 #x00000005) s32))
[GOOD] (assert (= (table0 #x00000006) s33))
[GOOD] (assert (= (table0 #x00000007) s34))
[GOOD] (assert (= (table0 #x00000008) s35))
[GOOD] (assert (= (table0 #x00000009) s36))
[GOOD] (assert (= (table0 #x0000000a) s37))
[GOOD] (assert (= (table0 #x0000000b) s38))
[GOOD] (assert (= (table0 #x0000000c) s39))
[GOOD] (assert (= (table0 #x0000000d) s40))
[GOOD] (assert (= (table0 #x0000000e) s41))
[GOOD] (assert (= (table0 #x0000000f) s42))
[GOOD] (assert (= (table0 #x00000010) s43))
[GOOD] (assert (= (table0 #x00000011) s44))
[GOOD] (assert (= (table0 #x00000012) s45))
[GOOD] (assert (= (table0 #x00000013) s46))
[GOOD] (assert (= (table0 #x00000014) s47))
[GOOD] (assert (= (table0 #x00000015) s48))
[GOOD] (assert (= (table0 #x00000016) s49))
[GOOD] (assert (= (table0 #x00000017) s50))
[GOOD] (assert (= (table0 #x00000018) s51))
[GOOD] (assert (= (table0 #x00000019) s52))
[GOOD] (assert (= (table0 #x0000001a) s53))
[GOOD] (assert (= (table0 #x0000001b) s54))
[GOOD] (assert (= (table0 #x0000001c) s55))
[GOOD] (assert (= (table0 #x0000001d) s56))
[GOOD] (assert (= (table0 #x0000001e) s57))
[GOOD] (assert (= (table0 #x0000001f) s58))
[GOOD] (assert (= (table0 #x00000020) s59))
[GOOD] (assert (= (table0 #x00000021) s60))
[GOOD] (assert (= (table0 #x00000022) s61))
[GOOD] (assert (= (table0 #x00000023) s62))
[GOOD] (assert (= (table0 #x00000024) s63))
[GOOD] (assert (= (table0 #x00000025) s64))
[GOOD] (assert (= (table0 #x00000026) s65))
[GOOD] (assert (= (table0 #x00000027) s66))
[GOOD] (assert (= (table0 #x00000028) s67))
[GOOD] (assert (= (table0 #x00000029) s68))
[GOOD] (assert (= (table0 #x0000002a) s69))
[GOOD] (assert (= (table0 #x0000002b) s70))
[GOOD] (assert (= (table0 #x0000002c) s71))
[GOOD] (assert (= (table0 #x0000002d) s72))
[GOOD] (assert (= (table0 #x0000002e) s73))
[GOOD] (assert (= (table0 #x0000002f) s74))
[GOOD] (assert (= (table0 #x00000030) s75))
[GOOD] (assert (= (table0 #x00000031) s76))
[GOOD] (assert (= (table0 #x00000032) s77))
[GOOD] (assert (= (table0 #x00000033) s78))
[GOOD] (assert (= (table0 #x00000034) s79))
[GOOD] (assert (= (table0 #x00000035) s80))
[GOOD] (assert (= (table0 #x00000036) s81))
[GOOD] (assert (= (table0 #x00000037) s82))
[GOOD] (assert (= (table0 #x00000038) s83))
[GOOD] (assert (= (table0 #x00000039) s84))
[GOOD] (assert (= (table0 #x0000003a) s85))
[GOOD] (assert (= (table0 #x0000003b) s86))
[GOOD] (assert (= (table0 #x0000003c) s87))
[GOOD] (assert (= (table0 #x0000003d) s88))
[GOOD] (assert (= (table0 #x0000003e) s89))
[GOOD] (assert (= (table0 #x0000003f) s90))
[GOOD] ; --- formula ---
[GOOD] (assert (not s93))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : CVC5
*** Exit code: ExitSuccess

FINAL:
Q.E.D.
DONE!
