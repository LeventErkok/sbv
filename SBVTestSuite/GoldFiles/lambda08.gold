** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has lambda expressions, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq (_ FloatingPoint  8 24)) (seq.++ (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 1.0 1.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 2.0 1.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 3.0 1.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 4.0 1.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 5.0 1.0)))))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (_ FloatingPoint  8 24)))
[GOOD] (declare-fun s1 () (Seq (_ FloatingPoint  8 24)))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- SBV Function definitions
[GOOD] (define-fun-rec |sbv.map_@((SFloat,_SFloat))_(lambda_((l1_s0_(__FloatingPoint_8_24)))_(let_((l1_s1_((__to_fp_8_24)_roundNearestTiesToEven_(/_1.0_1.0))))_(let_((l1_s2_(fp.add_roundNearestTiesToEven_l1_s0_l1_s1)))_l1_s2)))| ((lst (Seq (_ FloatingPoint  8 24)))) (Seq (_ FloatingPoint  8 24))
                     (ite (= lst (as seq.empty (Seq (_ FloatingPoint  8 24))))
                          (as seq.empty (Seq (_ FloatingPoint  8 24)))
                          (seq.++ (seq.unit (select (lambda ((l1_s0 (_ FloatingPoint  8 24)))
                                 (let ((l1_s1 ((_ to_fp 8 24) roundNearestTiesToEven (/ 1.0 1.0))))
                                 (let ((l1_s2 (fp.add roundNearestTiesToEven l1_s0 l1_s1)))
                                 l1_s2))) (seq.nth lst 0)))
                                  (|sbv.map_@((SFloat,_SFloat))_(lambda_((l1_s0_(__FloatingPoint_8_24)))_(let_((l1_s1_((__to_fp_8_24)_roundNearestTiesToEven_(/_1.0_1.0))))_(let_((l1_s2_(fp.add_roundNearestTiesToEven_l1_s0_l1_s1)))_l1_s2)))| (seq.extract lst 1 (- (seq.len lst) 1))))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () (Seq (_ FloatingPoint  8 24)) (|sbv.map_@((SFloat,_SFloat))_(lambda_((l1_s0_(__FloatingPoint_8_24)))_(let_((l1_s1_((__to_fp_8_24)_roundNearestTiesToEven_(/_1.0_1.0))))_(let_((l1_s2_(fp.add_roundNearestTiesToEven_l1_s0_l1_s1)))_l1_s2)))| s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit (fp #b0 #x80 #b00000000000000000000000))
               (seq.unit (fp #b0 #x80 #b10000000000000000000000))
               (seq.unit (fp #b0 #x81 #b00000000000000000000000))
               (seq.unit (fp #b0 #x81 #b01000000000000000000000))
               (seq.unit (fp #b0 #x81 #b10000000000000000000000)))))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (fp #b0 #x7f #b00000000000000000000000))
               (seq.unit (fp #b0 #x80 #b00000000000000000000000))
               (seq.unit (fp #b0 #x80 #b10000000000000000000000))
               (seq.unit (fp #b0 #x81 #b00000000000000000000000))
               (seq.unit (fp #b0 #x81 #b01000000000000000000000)))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit (fp #b0 #x80 #b00000000000000000000000))
               (seq.unit (fp #b0 #x80 #b10000000000000000000000))
               (seq.unit (fp #b0 #x81 #b00000000000000000000000))
               (seq.unit (fp #b0 #x81 #b01000000000000000000000))
               (seq.unit (fp #b0 #x81 #b10000000000000000000000)))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [1.0,2.0,3.0,4.0,5.0] :: [Float]
  s1 = [2.0,3.0,4.0,5.0,6.0] :: [Float]
