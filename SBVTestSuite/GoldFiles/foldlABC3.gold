** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 0)
[GOOD] (define-fun s15 () Int 1)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s4 () Bool (> s0 s3))
[GOOD] (define-fun s5 () Bool (> s1 s3))
[GOOD] (define-fun s6 () Bool (> s2 s3))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s13 () Bool (= s3 s12))
[GOOD] (define-fun s14 () Int (seq.nth s11 s3))
[GOOD] (define-fun s16 () Int (- s12 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s11 s15 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s3 s18))
[GOOD] (define-fun s20 () Int (seq.nth s17 s3))
[GOOD] (define-fun s21 () Int (- s18 s15))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s17 s15 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s3 s23))
[GOOD] (define-fun s25 () Int (seq.nth s22 s3))
[GOOD] (define-fun s26 () Int (ite s24 s3 s25))
[GOOD] (define-fun s27 () Int (+ s20 s26))
[GOOD] (define-fun s28 () Int (ite s19 s3 s27))
[GOOD] (define-fun s29 () Int (+ s14 s28))
[GOOD] (define-fun s30 () Int (ite s13 s3 s29))
[GOOD] (define-fun s31 () Int (+ s0 s1))
[GOOD] (define-fun s32 () Int (+ s2 s31))
[GOOD] (define-fun s33 () Bool (= s30 s32))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s4)
[GOOD] (assert s5)
[GOOD] (assert s6)
[GOOD] (assert s33)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
