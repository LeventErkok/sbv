** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (
           (Val (getVal_1 Int))
           (Var (getVar_1 String))
           (Add (getAdd_1 Expr) (getAdd_2 Expr))
           (Mul (getMul_1 Expr) (getMul_2 Expr))
           (Let (getLet_1 String) (getLet_2 Expr) (getLet_3 Expr))
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () Int 11)
[GOOD] (define-fun s4 () String "a")
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s8 () String "b")
[GOOD] (define-fun s10 () String "c")
[GOOD] (define-fun s14 () Int 1)
[GOOD] (define-fun s15 () Int 2)
[GOOD] (define-fun s18 () Int 10)
[GOOD] (define-fun s21 () Int 3)
[GOOD] (define-fun s24 () Int 4)
[GOOD] (define-fun s27 () Int 5)
[GOOD] (define-fun s28 () Int 6)
[GOOD] (define-fun s35 () Int 12)
[GOOD] (define-fun s60 () Int 13)
[GOOD] (define-fun s85 () Int 14)
[GOOD] (define-fun s110 () Int 15)
[GOOD] (define-fun s135 () Int 16)
[GOOD] (define-fun s160 () Int 17)
[GOOD] (define-fun s185 () Int 18)
[GOOD] (define-fun s210 () Int 19)
[GOOD] (define-fun s235 () Int 20)
[GOOD] (define-fun s260 () Int 50)
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Expr (Val s0))
[GOOD] (define-fun s2 () Bool (is-Var s1))
[GOOD] (define-fun s3 () String (getVar_1 s1))
[GOOD] (define-fun s5 () Bool (= s3 s4))
[GOOD] (define-fun s6 () Bool (and s2 s5))
[GOOD] (define-fun s9 () Bool (= s3 s8))
[GOOD] (define-fun s11 () Bool (= s3 s10))
[GOOD] (define-fun s12 () Bool (or s9 s11))
[GOOD] (define-fun s13 () Bool (and s2 s12))
[GOOD] (define-fun s16 () Bool (is-Val s1))
[GOOD] (define-fun s17 () Int (getVal_1 s1))
[GOOD] (define-fun s19 () Bool (< s17 s18))
[GOOD] (define-fun s20 () Bool (and s16 s19))
[GOOD] (define-fun s22 () Bool (= s17 s18))
[GOOD] (define-fun s23 () Bool (and s16 s22))
[GOOD] (define-fun s25 () Bool (> s17 s18))
[GOOD] (define-fun s26 () Bool (and s16 s25))
[GOOD] (define-fun s29 () Int (ite s26 s27 s28))
[GOOD] (define-fun s30 () Int (ite s23 s24 s29))
[GOOD] (define-fun s31 () Int (ite s20 s21 s30))
[GOOD] (define-fun s32 () Int (ite s2 s15 s31))
[GOOD] (define-fun s33 () Int (ite s13 s14 s32))
[GOOD] (define-fun s34 () Int (ite s6 s7 s33))
[GOOD] (define-fun s36 () Expr (Val s35))
[GOOD] (define-fun s37 () Bool (is-Var s36))
[GOOD] (define-fun s38 () String (getVar_1 s36))
[GOOD] (define-fun s39 () Bool (= s4 s38))
[GOOD] (define-fun s40 () Bool (and s37 s39))
[GOOD] (define-fun s41 () Bool (= s8 s38))
[GOOD] (define-fun s42 () Bool (= s10 s38))
[GOOD] (define-fun s43 () Bool (or s41 s42))
[GOOD] (define-fun s44 () Bool (and s37 s43))
[GOOD] (define-fun s45 () Bool (is-Val s36))
[GOOD] (define-fun s46 () Int (getVal_1 s36))
[GOOD] (define-fun s47 () Bool (< s46 s18))
[GOOD] (define-fun s48 () Bool (and s45 s47))
[GOOD] (define-fun s49 () Bool (= s18 s46))
[GOOD] (define-fun s50 () Bool (and s45 s49))
[GOOD] (define-fun s51 () Bool (> s46 s18))
[GOOD] (define-fun s52 () Bool (and s45 s51))
[GOOD] (define-fun s53 () Int (ite s52 s27 s28))
[GOOD] (define-fun s54 () Int (ite s50 s24 s53))
[GOOD] (define-fun s55 () Int (ite s48 s21 s54))
[GOOD] (define-fun s56 () Int (ite s37 s15 s55))
[GOOD] (define-fun s57 () Int (ite s44 s14 s56))
[GOOD] (define-fun s58 () Int (ite s40 s7 s57))
[GOOD] (define-fun s59 () Int (+ s34 s58))
[GOOD] (define-fun s61 () Expr (Val s60))
[GOOD] (define-fun s62 () Bool (is-Var s61))
[GOOD] (define-fun s63 () String (getVar_1 s61))
[GOOD] (define-fun s64 () Bool (= s4 s63))
[GOOD] (define-fun s65 () Bool (and s62 s64))
[GOOD] (define-fun s66 () Bool (= s8 s63))
[GOOD] (define-fun s67 () Bool (= s10 s63))
[GOOD] (define-fun s68 () Bool (or s66 s67))
[GOOD] (define-fun s69 () Bool (and s62 s68))
[GOOD] (define-fun s70 () Bool (is-Val s61))
[GOOD] (define-fun s71 () Int (getVal_1 s61))
[GOOD] (define-fun s72 () Bool (< s71 s18))
[GOOD] (define-fun s73 () Bool (and s70 s72))
[GOOD] (define-fun s74 () Bool (= s18 s71))
[GOOD] (define-fun s75 () Bool (and s70 s74))
[GOOD] (define-fun s76 () Bool (> s71 s18))
[GOOD] (define-fun s77 () Bool (and s70 s76))
[GOOD] (define-fun s78 () Int (ite s77 s27 s28))
[GOOD] (define-fun s79 () Int (ite s75 s24 s78))
[GOOD] (define-fun s80 () Int (ite s73 s21 s79))
[GOOD] (define-fun s81 () Int (ite s62 s15 s80))
[GOOD] (define-fun s82 () Int (ite s69 s14 s81))
[GOOD] (define-fun s83 () Int (ite s65 s7 s82))
[GOOD] (define-fun s84 () Int (+ s59 s83))
[GOOD] (define-fun s86 () Expr (Val s85))
[GOOD] (define-fun s87 () Bool (is-Var s86))
[GOOD] (define-fun s88 () String (getVar_1 s86))
[GOOD] (define-fun s89 () Bool (= s4 s88))
[GOOD] (define-fun s90 () Bool (and s87 s89))
[GOOD] (define-fun s91 () Bool (= s8 s88))
[GOOD] (define-fun s92 () Bool (= s10 s88))
[GOOD] (define-fun s93 () Bool (or s91 s92))
[GOOD] (define-fun s94 () Bool (and s87 s93))
[GOOD] (define-fun s95 () Bool (is-Val s86))
[GOOD] (define-fun s96 () Int (getVal_1 s86))
[GOOD] (define-fun s97 () Bool (< s96 s18))
[GOOD] (define-fun s98 () Bool (and s95 s97))
[GOOD] (define-fun s99 () Bool (= s18 s96))
[GOOD] (define-fun s100 () Bool (and s95 s99))
[GOOD] (define-fun s101 () Bool (> s96 s18))
[GOOD] (define-fun s102 () Bool (and s95 s101))
[GOOD] (define-fun s103 () Int (ite s102 s27 s28))
[GOOD] (define-fun s104 () Int (ite s100 s24 s103))
[GOOD] (define-fun s105 () Int (ite s98 s21 s104))
[GOOD] (define-fun s106 () Int (ite s87 s15 s105))
[GOOD] (define-fun s107 () Int (ite s94 s14 s106))
[GOOD] (define-fun s108 () Int (ite s90 s7 s107))
[GOOD] (define-fun s109 () Int (+ s84 s108))
[GOOD] (define-fun s111 () Expr (Val s110))
[GOOD] (define-fun s112 () Bool (is-Var s111))
[GOOD] (define-fun s113 () String (getVar_1 s111))
[GOOD] (define-fun s114 () Bool (= s4 s113))
[GOOD] (define-fun s115 () Bool (and s112 s114))
[GOOD] (define-fun s116 () Bool (= s8 s113))
[GOOD] (define-fun s117 () Bool (= s10 s113))
[GOOD] (define-fun s118 () Bool (or s116 s117))
[GOOD] (define-fun s119 () Bool (and s112 s118))
[GOOD] (define-fun s120 () Bool (is-Val s111))
[GOOD] (define-fun s121 () Int (getVal_1 s111))
[GOOD] (define-fun s122 () Bool (< s121 s18))
[GOOD] (define-fun s123 () Bool (and s120 s122))
[GOOD] (define-fun s124 () Bool (= s18 s121))
[GOOD] (define-fun s125 () Bool (and s120 s124))
[GOOD] (define-fun s126 () Bool (> s121 s18))
[GOOD] (define-fun s127 () Bool (and s120 s126))
[GOOD] (define-fun s128 () Int (ite s127 s27 s28))
[GOOD] (define-fun s129 () Int (ite s125 s24 s128))
[GOOD] (define-fun s130 () Int (ite s123 s21 s129))
[GOOD] (define-fun s131 () Int (ite s112 s15 s130))
[GOOD] (define-fun s132 () Int (ite s119 s14 s131))
[GOOD] (define-fun s133 () Int (ite s115 s7 s132))
[GOOD] (define-fun s134 () Int (+ s109 s133))
[GOOD] (define-fun s136 () Expr (Val s135))
[GOOD] (define-fun s137 () Bool (is-Var s136))
[GOOD] (define-fun s138 () String (getVar_1 s136))
[GOOD] (define-fun s139 () Bool (= s4 s138))
[GOOD] (define-fun s140 () Bool (and s137 s139))
[GOOD] (define-fun s141 () Bool (= s8 s138))
[GOOD] (define-fun s142 () Bool (= s10 s138))
[GOOD] (define-fun s143 () Bool (or s141 s142))
[GOOD] (define-fun s144 () Bool (and s137 s143))
[GOOD] (define-fun s145 () Bool (is-Val s136))
[GOOD] (define-fun s146 () Int (getVal_1 s136))
[GOOD] (define-fun s147 () Bool (< s146 s18))
[GOOD] (define-fun s148 () Bool (and s145 s147))
[GOOD] (define-fun s149 () Bool (= s18 s146))
[GOOD] (define-fun s150 () Bool (and s145 s149))
[GOOD] (define-fun s151 () Bool (> s146 s18))
[GOOD] (define-fun s152 () Bool (and s145 s151))
[GOOD] (define-fun s153 () Int (ite s152 s27 s28))
[GOOD] (define-fun s154 () Int (ite s150 s24 s153))
[GOOD] (define-fun s155 () Int (ite s148 s21 s154))
[GOOD] (define-fun s156 () Int (ite s137 s15 s155))
[GOOD] (define-fun s157 () Int (ite s144 s14 s156))
[GOOD] (define-fun s158 () Int (ite s140 s7 s157))
[GOOD] (define-fun s159 () Int (+ s134 s158))
[GOOD] (define-fun s161 () Expr (Val s160))
[GOOD] (define-fun s162 () Bool (is-Var s161))
[GOOD] (define-fun s163 () String (getVar_1 s161))
[GOOD] (define-fun s164 () Bool (= s4 s163))
[GOOD] (define-fun s165 () Bool (and s162 s164))
[GOOD] (define-fun s166 () Bool (= s8 s163))
[GOOD] (define-fun s167 () Bool (= s10 s163))
[GOOD] (define-fun s168 () Bool (or s166 s167))
[GOOD] (define-fun s169 () Bool (and s162 s168))
[GOOD] (define-fun s170 () Bool (is-Val s161))
[GOOD] (define-fun s171 () Int (getVal_1 s161))
[GOOD] (define-fun s172 () Bool (< s171 s18))
[GOOD] (define-fun s173 () Bool (and s170 s172))
[GOOD] (define-fun s174 () Bool (= s18 s171))
[GOOD] (define-fun s175 () Bool (and s170 s174))
[GOOD] (define-fun s176 () Bool (> s171 s18))
[GOOD] (define-fun s177 () Bool (and s170 s176))
[GOOD] (define-fun s178 () Int (ite s177 s27 s28))
[GOOD] (define-fun s179 () Int (ite s175 s24 s178))
[GOOD] (define-fun s180 () Int (ite s173 s21 s179))
[GOOD] (define-fun s181 () Int (ite s162 s15 s180))
[GOOD] (define-fun s182 () Int (ite s169 s14 s181))
[GOOD] (define-fun s183 () Int (ite s165 s7 s182))
[GOOD] (define-fun s184 () Int (+ s159 s183))
[GOOD] (define-fun s186 () Expr (Val s185))
[GOOD] (define-fun s187 () Bool (is-Var s186))
[GOOD] (define-fun s188 () String (getVar_1 s186))
[GOOD] (define-fun s189 () Bool (= s4 s188))
[GOOD] (define-fun s190 () Bool (and s187 s189))
[GOOD] (define-fun s191 () Bool (= s8 s188))
[GOOD] (define-fun s192 () Bool (= s10 s188))
[GOOD] (define-fun s193 () Bool (or s191 s192))
[GOOD] (define-fun s194 () Bool (and s187 s193))
[GOOD] (define-fun s195 () Bool (is-Val s186))
[GOOD] (define-fun s196 () Int (getVal_1 s186))
[GOOD] (define-fun s197 () Bool (< s196 s18))
[GOOD] (define-fun s198 () Bool (and s195 s197))
[GOOD] (define-fun s199 () Bool (= s18 s196))
[GOOD] (define-fun s200 () Bool (and s195 s199))
[GOOD] (define-fun s201 () Bool (> s196 s18))
[GOOD] (define-fun s202 () Bool (and s195 s201))
[GOOD] (define-fun s203 () Int (ite s202 s27 s28))
[GOOD] (define-fun s204 () Int (ite s200 s24 s203))
[GOOD] (define-fun s205 () Int (ite s198 s21 s204))
[GOOD] (define-fun s206 () Int (ite s187 s15 s205))
[GOOD] (define-fun s207 () Int (ite s194 s14 s206))
[GOOD] (define-fun s208 () Int (ite s190 s7 s207))
[GOOD] (define-fun s209 () Int (+ s184 s208))
[GOOD] (define-fun s211 () Expr (Val s210))
[GOOD] (define-fun s212 () Bool (is-Var s211))
[GOOD] (define-fun s213 () String (getVar_1 s211))
[GOOD] (define-fun s214 () Bool (= s4 s213))
[GOOD] (define-fun s215 () Bool (and s212 s214))
[GOOD] (define-fun s216 () Bool (= s8 s213))
[GOOD] (define-fun s217 () Bool (= s10 s213))
[GOOD] (define-fun s218 () Bool (or s216 s217))
[GOOD] (define-fun s219 () Bool (and s212 s218))
[GOOD] (define-fun s220 () Bool (is-Val s211))
[GOOD] (define-fun s221 () Int (getVal_1 s211))
[GOOD] (define-fun s222 () Bool (< s221 s18))
[GOOD] (define-fun s223 () Bool (and s220 s222))
[GOOD] (define-fun s224 () Bool (= s18 s221))
[GOOD] (define-fun s225 () Bool (and s220 s224))
[GOOD] (define-fun s226 () Bool (> s221 s18))
[GOOD] (define-fun s227 () Bool (and s220 s226))
[GOOD] (define-fun s228 () Int (ite s227 s27 s28))
[GOOD] (define-fun s229 () Int (ite s225 s24 s228))
[GOOD] (define-fun s230 () Int (ite s223 s21 s229))
[GOOD] (define-fun s231 () Int (ite s212 s15 s230))
[GOOD] (define-fun s232 () Int (ite s219 s14 s231))
[GOOD] (define-fun s233 () Int (ite s215 s7 s232))
[GOOD] (define-fun s234 () Int (+ s209 s233))
[GOOD] (define-fun s236 () Expr (Val s235))
[GOOD] (define-fun s237 () Bool (is-Var s236))
[GOOD] (define-fun s238 () String (getVar_1 s236))
[GOOD] (define-fun s239 () Bool (= s4 s238))
[GOOD] (define-fun s240 () Bool (and s237 s239))
[GOOD] (define-fun s241 () Bool (= s8 s238))
[GOOD] (define-fun s242 () Bool (= s10 s238))
[GOOD] (define-fun s243 () Bool (or s241 s242))
[GOOD] (define-fun s244 () Bool (and s237 s243))
[GOOD] (define-fun s245 () Bool (is-Val s236))
[GOOD] (define-fun s246 () Int (getVal_1 s236))
[GOOD] (define-fun s247 () Bool (< s246 s18))
[GOOD] (define-fun s248 () Bool (and s245 s247))
[GOOD] (define-fun s249 () Bool (= s18 s246))
[GOOD] (define-fun s250 () Bool (and s245 s249))
[GOOD] (define-fun s251 () Bool (> s246 s18))
[GOOD] (define-fun s252 () Bool (and s245 s251))
[GOOD] (define-fun s253 () Int (ite s252 s27 s28))
[GOOD] (define-fun s254 () Int (ite s250 s24 s253))
[GOOD] (define-fun s255 () Int (ite s248 s21 s254))
[GOOD] (define-fun s256 () Int (ite s237 s15 s255))
[GOOD] (define-fun s257 () Int (ite s244 s14 s256))
[GOOD] (define-fun s258 () Int (ite s240 s7 s257))
[GOOD] (define-fun s259 () Int (+ s234 s258))
[GOOD] (define-fun s261 () Bool (distinct s259 s260))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s261)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
