** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Maybe
[GOOD] (declare-datatype Maybe (par (a) (
           (Nothing)
           (Just (getJust_1 a))
       )))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 0)
[GOOD] (define-fun s4 () Int 1)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (Maybe String))) ; tracks user variable "lst"
[GOOD] (assert (forall ((seq0 Int)) (=> (and (>= seq0 0) (< seq0 (seq.len s0))) (= 1 (str.len (getJust_1 (seq.nth s0 seq0)))))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s2 () (Maybe String) (seq.nth s0 s1))
[GOOD] (define-fun s3 () Bool ((as is-Just Bool) s2))
[GOOD] (define-fun s5 () Int (seq.len s0))
[GOOD] (define-fun s6 () Int (- s5 s4))
[GOOD] (define-fun s7 () (Seq (Maybe String)) (seq.extract s0 s4 s6))
[GOOD] (define-fun s8 () (Maybe String) (seq.nth s7 s1))
[GOOD] (define-fun s9 () Bool ((as is-Nothing Bool) s8))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.unit (Just "A"))))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
[Just 'A']
