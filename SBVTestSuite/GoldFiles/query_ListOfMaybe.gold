** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVMaybe 1)) ((par (T)
                                           ((nothing_SBVMaybe)
                                            (just_SBVMaybe (get_just_SBVMaybe T))))))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 2)
[GOOD] (define-fun s4 () Int 0)
[GOOD] (define-fun s8 () Int 1)
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq (SBVMaybe String))) ; tracks user variable "lst"
[GOOD] (assert (forall ((seq0 Int)) (=> (and (>= seq0 0) (< seq0 (seq.len s0))) (=> ((_ is (just_SBVMaybe (String) (SBVMaybe String))) (seq.nth s0 seq0)) (= 1 (str.len (get_just_SBVMaybe (seq.nth s0 seq0))))))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () (SBVMaybe String) (seq.nth s0 s4))
[GOOD] (define-fun s6 () Bool ((_ is (nothing_SBVMaybe () (SBVMaybe String))) s5))
[GOOD] (define-fun s7 () Bool (ite s6 false true))
[GOOD] (define-fun s9 () Int (- s1 s8))
[GOOD] (define-fun s10 () (Seq (SBVMaybe String)) (seq.extract s0 s8 s9))
[GOOD] (define-fun s11 () (SBVMaybe String) (seq.nth s10 s4))
[GOOD] (define-fun s12 () Bool ((_ is (nothing_SBVMaybe () (SBVMaybe String))) s11))
[GOOD] (define-fun s13 () Bool (ite s12 true false))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s7)
[GOOD] (assert s13)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (just_SBVMaybe "A")) (seq.unit nothing_SBVMaybe))))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
[Just 'A',Nothing]
