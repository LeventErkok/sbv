** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has lambda expressions, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Seq Int) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6) (seq.unit 8) (seq.unit 10)))
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () Bool)
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- Firstified function definitions
[GOOD] ; Firstified function: any :: (SInteger -> SBool) -> [SInteger] -> SBool
[GOOD] (define-fun-rec sbv.any_ca4250 ((lst (Seq Int))) Bool
                       (ite (= lst (as seq.empty (Seq Int)))
                            false
                            (or (select (lambda ((args0 Int))
                 (let ((args1 2))
                 (let ((args3 0))
                 (let ((args7 1))
                 (let ((args13 (- 1)))
                 (let ((args2 (mod args0 args1)))
                 (let ((args4 (>= args0 args3)))
                 (let ((args5 (= args2 args3)))
                 (let ((args6 (or args4 args5)))
                 (let ((args8 (ite args6 args3 args7)))
                 (let ((args9 (* args1 args8)))
                 (let ((args10 (- args2 args9)))
                 (let ((args11 (> args10 args3)))
                 (let ((args12 (< args10 args3)))
                 (let ((args14 (ite args12 args13 args10)))
                 (let ((args15 (ite args11 args7 args14)))
                 (let ((args16 (= args13 args15)))
                 (let ((args17 (+ args1 args10)))
                 (let ((args18 (ite args16 args17 args10)))
                 (let ((args19 (distinct args3 args18)))
                 args19)))))))))))))))))))) (seq.nth lst 0)) (sbv.any_ca4250 (seq.extract lst 1 (- (seq.len lst) 1))))))
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () Bool (sbv.any_ca4250 s0))
[GOOD] (define-fun s5 () Bool (= s1 s4))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s3)
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 false))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6) (seq.unit 8) (seq.unit 10))))
[SEND] (get-value (s1))
[RECV] ((s1 false))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = [2,4,6,8,10] :: [Integer]
  s1 =        False :: Bool
