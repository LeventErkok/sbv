** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- ADTs  --- 
[GOOD] ; User defined ADT: Expr
[GOOD] (declare-datatype Expr (
           (Val (getVal_1 Int))
           (Var (getVar_1 String))
           (Add (getAdd_1 Expr) (getAdd_2 Expr))
           (Mul (getMul_1 Expr) (getMul_2 Expr))
           (Let (getLet_1 String) (getLet_2 Expr) (getLet_3 Expr))
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () Expr ((as Val Expr) 10))
[GOOD] (define-fun s2 () Int 10)
[GOOD] (define-fun s4 () Int 3)
[GOOD] (define-fun s6 () Int 4)
[GOOD] (define-fun s8 () Int 5)
[GOOD] (define-fun s9 () Int 6)
[GOOD] (define-fun s14 () Int 8)
[GOOD] ; --- top level inputs ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s1 () Int (getVal_1 s0))
[GOOD] (define-fun s3 () Bool (< s1 s2))
[GOOD] (define-fun s5 () Bool (= s1 s2))
[GOOD] (define-fun s7 () Bool (> s1 s2))
[GOOD] (define-fun s10 () Int (ite s7 s8 s9))
[GOOD] (define-fun s11 () Int (ite s5 s6 s10))
[GOOD] (define-fun s12 () Int (ite s3 s4 s11))
[GOOD] (define-fun s13 () Int (+ s12 s12))
[GOOD] (define-fun s15 () Bool (distinct s13 s14))
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s15)
[SEND] (check-sat)
[RECV] unsat
All good.
*** Solver   : Z3
*** Exit code: ExitSuccess
